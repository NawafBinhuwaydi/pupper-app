{"ast":null,"code":"import _objectSpread from \"/home/nawaf/aws-project/pupper-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { convertArrayBufferToBase64Url } from '../../../foundation/convert/base64url/convertArrayBufferToBase64Url.mjs';\nimport { convertBase64UrlToArrayBuffer } from '../../../foundation/convert/base64url/convertBase64UrlToArrayBuffer.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Deserializes Public Key Credential Creation Options JSON\n * @param input PasskeyCreateOptionsJson\n * @returns PublicKeyCredentialCreationOptions\n */\nconst deserializeJsonToPkcCreationOptions = input => {\n  const userIdBuffer = convertBase64UrlToArrayBuffer(input.user.id);\n  const challengeBuffer = convertBase64UrlToArrayBuffer(input.challenge);\n  const excludeCredentialsWithBuffer = (input.excludeCredentials || []).map(excludeCred => _objectSpread(_objectSpread({}, excludeCred), {}, {\n    id: convertBase64UrlToArrayBuffer(excludeCred.id)\n  }));\n  return _objectSpread(_objectSpread({}, input), {}, {\n    excludeCredentials: excludeCredentialsWithBuffer,\n    challenge: challengeBuffer,\n    user: _objectSpread(_objectSpread({}, input.user), {}, {\n      id: userIdBuffer\n    })\n  });\n};\n/**\n * Serializes a Public Key Credential With Attestation to JSON\n * @param input PasskeyCreateResult\n * @returns PasskeyCreateResultJson\n */\nconst serializePkcWithAttestationToJson = input => {\n  const response = {\n    clientDataJSON: convertArrayBufferToBase64Url(input.response.clientDataJSON),\n    attestationObject: convertArrayBufferToBase64Url(input.response.attestationObject),\n    transports: input.response.getTransports(),\n    publicKeyAlgorithm: input.response.getPublicKeyAlgorithm(),\n    authenticatorData: convertArrayBufferToBase64Url(input.response.getAuthenticatorData())\n  };\n  const publicKey = input.response.getPublicKey();\n  if (publicKey) {\n    response.publicKey = convertArrayBufferToBase64Url(publicKey);\n  }\n  const resultJson = {\n    type: input.type,\n    id: input.id,\n    rawId: convertArrayBufferToBase64Url(input.rawId),\n    clientExtensionResults: input.getClientExtensionResults(),\n    response\n  };\n  if (input.authenticatorAttachment) {\n    resultJson.authenticatorAttachment = input.authenticatorAttachment;\n  }\n  return resultJson;\n};\n/**\n * Deserializes Public Key Credential Get Options JSON\n * @param input PasskeyGetOptionsJson\n * @returns PublicKeyCredentialRequestOptions\n */\nconst deserializeJsonToPkcGetOptions = input => {\n  const challengeBuffer = convertBase64UrlToArrayBuffer(input.challenge);\n  const allowedCredentialsWithBuffer = (input.allowCredentials || []).map(allowedCred => _objectSpread(_objectSpread({}, allowedCred), {}, {\n    id: convertBase64UrlToArrayBuffer(allowedCred.id)\n  }));\n  return _objectSpread(_objectSpread({}, input), {}, {\n    challenge: challengeBuffer,\n    allowCredentials: allowedCredentialsWithBuffer\n  });\n};\n/**\n * Serializes a Public Key Credential With Attestation to JSON\n * @param input PasskeyGetResult\n * @returns PasskeyGetResultJson\n */\nconst serializePkcWithAssertionToJson = input => {\n  const response = {\n    clientDataJSON: convertArrayBufferToBase64Url(input.response.clientDataJSON),\n    authenticatorData: convertArrayBufferToBase64Url(input.response.authenticatorData),\n    signature: convertArrayBufferToBase64Url(input.response.signature)\n  };\n  if (input.response.userHandle) {\n    response.userHandle = convertArrayBufferToBase64Url(input.response.userHandle);\n  }\n  const resultJson = {\n    id: input.id,\n    rawId: convertArrayBufferToBase64Url(input.rawId),\n    type: input.type,\n    clientExtensionResults: input.getClientExtensionResults(),\n    response\n  };\n  if (input.authenticatorAttachment) {\n    resultJson.authenticatorAttachment = input.authenticatorAttachment;\n  }\n  return resultJson;\n};\nexport { deserializeJsonToPkcCreationOptions, deserializeJsonToPkcGetOptions, serializePkcWithAssertionToJson, serializePkcWithAttestationToJson };\n//# sourceMappingURL=serde.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}