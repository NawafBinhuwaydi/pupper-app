{"ast":null,"code":"import { Hub } from '@aws-amplify/core';\nimport { isBrowser, assertTokenProviderConfig, isTokenExpired, AMPLIFY_SYMBOL, AmplifyErrorCode } from '@aws-amplify/core/internals/utils';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { oAuthStore } from '../utils/oauth/oAuthStore.mjs';\nimport { addInflightPromise } from '../utils/oauth/inflightPromise.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nclass TokenOrchestrator {\n  constructor() {\n    this.waitForInflightOAuth = isBrowser() ? async () => {\n      if (!(await oAuthStore.loadOAuthInFlight())) {\n        return;\n      }\n      if (this.inflightPromise) {\n        return this.inflightPromise;\n      }\n      // when there is valid oauth config and there is an inflight oauth flow, try\n      // to block async calls that require fetching tokens before the oauth flow completes\n      // e.g. getCurrentUser, fetchAuthSession etc.\n      this.inflightPromise = new Promise((resolve, _reject) => {\n        addInflightPromise(resolve);\n      });\n      return this.inflightPromise;\n    } : async () => {\n      // no-op for non-browser environments\n    };\n  }\n  setAuthConfig(authConfig) {\n    oAuthStore.setAuthConfig(authConfig.Cognito);\n    this.authConfig = authConfig;\n  }\n  setTokenRefresher(tokenRefresher) {\n    this.tokenRefresher = tokenRefresher;\n  }\n  setAuthTokenStore(tokenStore) {\n    this.tokenStore = tokenStore;\n  }\n  getTokenStore() {\n    if (!this.tokenStore) {\n      throw new AuthError({\n        name: 'EmptyTokenStoreException',\n        message: 'TokenStore not set'\n      });\n    }\n    return this.tokenStore;\n  }\n  getTokenRefresher() {\n    if (!this.tokenRefresher) {\n      throw new AuthError({\n        name: 'EmptyTokenRefresherException',\n        message: 'TokenRefresher not set'\n      });\n    }\n    return this.tokenRefresher;\n  }\n  async getTokens(options) {\n    var _tokens, _tokens$idToken$paylo, _tokens$idToken, _tokens$clockDrift, _tokens$accessToken$p, _tokens$accessToken, _tokens$clockDrift2, _tokens2, _tokens3, _tokens4;\n    let tokens;\n    try {\n      var _this$authConfig;\n      assertTokenProviderConfig((_this$authConfig = this.authConfig) === null || _this$authConfig === void 0 ? void 0 : _this$authConfig.Cognito);\n    } catch (_err) {\n      // Token provider not configured\n      return null;\n    }\n    await this.waitForInflightOAuth();\n    this.inflightPromise = undefined;\n    tokens = await this.getTokenStore().loadTokens();\n    const username = await this.getTokenStore().getLastAuthUser();\n    if (tokens === null) {\n      return null;\n    }\n    const idTokenExpired = !!((_tokens = tokens) !== null && _tokens !== void 0 && _tokens.idToken) && isTokenExpired({\n      expiresAt: ((_tokens$idToken$paylo = (_tokens$idToken = tokens.idToken) === null || _tokens$idToken === void 0 || (_tokens$idToken = _tokens$idToken.payload) === null || _tokens$idToken === void 0 ? void 0 : _tokens$idToken.exp) !== null && _tokens$idToken$paylo !== void 0 ? _tokens$idToken$paylo : 0) * 1000,\n      clockDrift: (_tokens$clockDrift = tokens.clockDrift) !== null && _tokens$clockDrift !== void 0 ? _tokens$clockDrift : 0\n    });\n    const accessTokenExpired = isTokenExpired({\n      expiresAt: ((_tokens$accessToken$p = (_tokens$accessToken = tokens.accessToken) === null || _tokens$accessToken === void 0 || (_tokens$accessToken = _tokens$accessToken.payload) === null || _tokens$accessToken === void 0 ? void 0 : _tokens$accessToken.exp) !== null && _tokens$accessToken$p !== void 0 ? _tokens$accessToken$p : 0) * 1000,\n      clockDrift: (_tokens$clockDrift2 = tokens.clockDrift) !== null && _tokens$clockDrift2 !== void 0 ? _tokens$clockDrift2 : 0\n    });\n    if (options !== null && options !== void 0 && options.forceRefresh || idTokenExpired || accessTokenExpired) {\n      tokens = await this.refreshTokens({\n        tokens,\n        username\n      });\n      if (tokens === null) {\n        return null;\n      }\n    }\n    return {\n      accessToken: (_tokens2 = tokens) === null || _tokens2 === void 0 ? void 0 : _tokens2.accessToken,\n      idToken: (_tokens3 = tokens) === null || _tokens3 === void 0 ? void 0 : _tokens3.idToken,\n      signInDetails: (_tokens4 = tokens) === null || _tokens4 === void 0 ? void 0 : _tokens4.signInDetails\n    };\n  }\n  async refreshTokens(_ref) {\n    let {\n      tokens,\n      username\n    } = _ref;\n    try {\n      const {\n        signInDetails\n      } = tokens;\n      const newTokens = await this.getTokenRefresher()({\n        tokens,\n        authConfig: this.authConfig,\n        username\n      });\n      newTokens.signInDetails = signInDetails;\n      await this.setTokens({\n        tokens: newTokens\n      });\n      Hub.dispatch('auth', {\n        event: 'tokenRefresh'\n      }, 'Auth', AMPLIFY_SYMBOL);\n      return newTokens;\n    } catch (err) {\n      return this.handleErrors(err);\n    }\n  }\n  handleErrors(err) {\n    assertServiceError(err);\n    if (err.name !== AmplifyErrorCode.NetworkError) {\n      // TODO(v6): Check errors on client\n      this.clearTokens();\n    }\n    Hub.dispatch('auth', {\n      event: 'tokenRefresh_failure',\n      data: {\n        error: err\n      }\n    }, 'Auth', AMPLIFY_SYMBOL);\n    if (err.name.startsWith('NotAuthorizedException')) {\n      return null;\n    }\n    throw err;\n  }\n  async setTokens(_ref2) {\n    let {\n      tokens\n    } = _ref2;\n    return this.getTokenStore().storeTokens(tokens);\n  }\n  async clearTokens() {\n    return this.getTokenStore().clearTokens();\n  }\n  getDeviceMetadata(username) {\n    return this.getTokenStore().getDeviceMetadata(username);\n  }\n  clearDeviceMetadata(username) {\n    return this.getTokenStore().clearDeviceMetadata(username);\n  }\n  setOAuthMetadata(metadata) {\n    return this.getTokenStore().setOAuthMetadata(metadata);\n  }\n  getOAuthMetadata() {\n    return this.getTokenStore().getOAuthMetadata();\n  }\n}\nexport { TokenOrchestrator };\n//# sourceMappingURL=TokenOrchestrator.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}