{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Retrieves the device name using the User-Agent Client Hints API if available,\n * falling back to the traditional userAgent string if not.\n *\n * @returns {Promise<string>} A promise that resolves with a string representing the device name.\n *\n * Example Output:\n * navigator.userAgentData:\n *   'macOS 14.2.1 arm macOS Not A(Brand/99.0.0.0;Google Chrome/121.0.6167.160;Chromium/121.0.6167.160'\n * navigator.userAgent:\n *   'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/115.0'\n */\nconst getDeviceName = async () => {\n  const {\n    userAgentData\n  } = navigator;\n  if (!userAgentData) return navigator.userAgent;\n  const {\n    platform = '',\n    platformVersion = '',\n    model = '',\n    architecture = '',\n    fullVersionList = []\n  } = await userAgentData.getHighEntropyValues(['platform', 'platformVersion', 'architecture', 'model', 'fullVersionList']);\n  const versionList = fullVersionList.map(v => \"\".concat(v.brand, \"/\").concat(v.version)).join(';');\n  const deviceName = [platform, platformVersion, architecture, model, platform, versionList].filter(value => value).join(' ');\n  return deviceName || navigator.userAgent;\n};\nexport { getDeviceName };\n//# sourceMappingURL=getDeviceName.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}