{"ast":null,"code":"import { syncSessionStorage } from '@aws-amplify/core';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Minutes until stored session invalidates is defaulted to 3 minutes\n// to maintain parity with Amazon Cognito user pools API behavior\nconst MS_TO_EXPIRY = 3 * 60 * 1000;\nconst TGT_STATE = 'CognitoSignInState';\nconst SIGN_IN_STATE_KEYS = {\n  username: `${TGT_STATE}.username`,\n  challengeName: `${TGT_STATE}.challengeName`,\n  signInSession: `${TGT_STATE}.signInSession`,\n  expiry: `${TGT_STATE}.expiry`\n};\nconst signInReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_SIGN_IN_SESSION':\n      persistSignInState({\n        signInSession: action.value\n      });\n      return {\n        ...state,\n        signInSession: action.value\n      };\n    case 'SET_SIGN_IN_STATE':\n      persistSignInState(action.value);\n      return {\n        ...action.value\n      };\n    case 'SET_CHALLENGE_NAME':\n      persistSignInState({\n        challengeName: action.value\n      });\n      return {\n        ...state,\n        challengeName: action.value\n      };\n    case 'SET_USERNAME':\n      persistSignInState({\n        username: action.value\n      });\n      return {\n        ...state,\n        username: action.value\n      };\n    case 'SET_INITIAL_STATE':\n      return getInitialState();\n    case 'RESET_STATE':\n      clearPersistedSignInState();\n      return getDefaultState();\n    // this state is never reachable\n    default:\n      return state;\n  }\n};\nconst isExpired = expiryDate => {\n  const expiryTimestamp = Number(expiryDate);\n  const currentTimestamp = Date.now();\n  return expiryTimestamp <= currentTimestamp;\n};\nconst resetActiveSignInState = () => {\n  signInStore.dispatch({\n    type: 'RESET_STATE'\n  });\n};\nconst clearPersistedSignInState = () => {\n  for (const stateKey of Object.values(SIGN_IN_STATE_KEYS)) {\n    syncSessionStorage.removeItem(stateKey);\n  }\n};\nconst getDefaultState = () => ({\n  username: undefined,\n  challengeName: undefined,\n  signInSession: undefined\n});\n// Hydrate signInStore from syncSessionStorage if the session has not expired\nconst getInitialState = () => {\n  const expiry = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.expiry);\n  if (!expiry || isExpired(expiry)) {\n    clearPersistedSignInState();\n    return getDefaultState();\n  }\n  const username = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.username) ?? undefined;\n  const challengeName = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.challengeName) ?? undefined;\n  const signInSession = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.signInSession) ?? undefined;\n  return {\n    username,\n    challengeName,\n    signInSession\n  };\n};\nconst createStore = reducer => {\n  let currentState = reducer(getDefaultState(), {\n    type: 'SET_INITIAL_STATE'\n  });\n  return {\n    getState: () => currentState,\n    dispatch: action => {\n      currentState = reducer(currentState, action);\n    }\n  };\n};\nconst signInStore = createStore(signInReducer);\nfunction setActiveSignInState(state) {\n  signInStore.dispatch({\n    type: 'SET_SIGN_IN_STATE',\n    value: state\n  });\n}\n// Save local state into Session Storage\nconst persistSignInState = ({\n  challengeName,\n  signInSession,\n  username\n}) => {\n  username && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.username, username);\n  challengeName && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.challengeName, challengeName);\n  if (signInSession) {\n    syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.signInSession, signInSession);\n    // Updates expiry when session is passed\n    syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.expiry, String(Date.now() + MS_TO_EXPIRY));\n  }\n};\nexport { persistSignInState, resetActiveSignInState, setActiveSignInState, signInStore };\n//# sourceMappingURL=signInStore.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}