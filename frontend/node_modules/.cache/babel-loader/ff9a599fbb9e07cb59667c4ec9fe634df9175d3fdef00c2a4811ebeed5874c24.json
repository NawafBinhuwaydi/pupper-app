{"ast":null,"code":"import '../../../../types/errors.mjs';\nimport '../../../../errors/errorHelpers.mjs';\nimport '../../../../utils/getClientInfo/getClientInfo.mjs';\nimport '../../../../utils/retry/retry.mjs';\nimport '../../../../parseAWSExports.mjs';\nimport 'uuid';\nimport '../../../../singleton/Auth/utils/errorHelpers.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport { getAmplifyUserAgent } from '../../../../Platform/index.mjs';\nimport '../../../../Platform/types.mjs';\nimport '../../../../BackgroundProcessManager/types.mjs';\nimport '../../../../Reachability/Reachability.mjs';\nimport '../../../../Hub/index.mjs';\nimport '../../../../utils/sessionListener/index.mjs';\nimport { parseMetadata } from '../../../../clients/serde/responseInfo.mjs';\nimport { parseJsonError, parseJsonBody } from '../../../../clients/serde/json.mjs';\nimport { composeServiceApi } from '../../../../clients/internal/composeServiceApi.mjs';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\nimport { cognitoIdentityTransferHandler } from './handler/cognitoIdentityTransferHandler.mjs';\nimport { createClientSerializer } from './serde/createClientSerializer.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createGetCredentialsForIdentityClient = config => composeServiceApi(cognitoIdentityTransferHandler, createClientSerializer('GetCredentialsForIdentity'), getCredentialsForIdentityDeserializer, {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config,\n  userAgentValue: getAmplifyUserAgent()\n});\nconst getCredentialsForIdentityDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseJsonError(response);\n    throw error;\n  }\n  const body = await parseJsonBody(response);\n  return {\n    IdentityId: body.IdentityId,\n    Credentials: deserializeCredentials(body.Credentials),\n    $metadata: parseMetadata(response)\n  };\n};\nconst deserializeCredentials = ({\n  Expiration,\n  ...rest\n} = {}) => ({\n  ...rest,\n  Expiration: Expiration && new Date(Expiration * 1000)\n});\nexport { createGetCredentialsForIdentityClient };\n//# sourceMappingURL=createGetCredentialsForIdentityClient.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}