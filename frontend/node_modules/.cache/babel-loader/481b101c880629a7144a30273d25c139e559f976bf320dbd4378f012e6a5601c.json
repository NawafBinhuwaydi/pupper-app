{"ast":null,"code":"import { authenticatedHandler } from '../../clients/handlers/aws/authenticated.mjs';\nimport { composeServiceApi } from '../../clients/internal/composeServiceApi.mjs';\nimport { extendedEncodeURIComponent } from '../../clients/middleware/signing/utils/extendedEncodeURIComponent.mjs';\nimport { parseMetadata } from '../../clients/serde/responseInfo.mjs';\nimport { parseJsonError, parseJsonBody } from '../../clients/serde/json.mjs';\nimport { AmplifyUrl } from '../../utils/amplifyUrl/index.mjs';\nimport { defaultConfig, getSharedHeaders } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst updateEndpointSerializer = (_ref, endpoint) => {\n  let {\n    ApplicationId = '',\n    EndpointId = '',\n    EndpointRequest\n  } = _ref;\n  const headers = getSharedHeaders();\n  const url = new AmplifyUrl(endpoint.url);\n  url.pathname = \"v1/apps/\".concat(extendedEncodeURIComponent(ApplicationId), \"/endpoints/\").concat(extendedEncodeURIComponent(EndpointId));\n  const body = JSON.stringify(EndpointRequest);\n  return {\n    method: 'PUT',\n    headers,\n    url,\n    body\n  };\n};\nconst updateEndpointDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseJsonError(response);\n    throw error;\n  } else {\n    const {\n      Message,\n      RequestID\n    } = await parseJsonBody(response);\n    return {\n      MessageBody: {\n        Message,\n        RequestID\n      },\n      $metadata: parseMetadata(response)\n    };\n  }\n};\n/**\n * @internal\n */\nconst updateEndpoint = composeServiceApi(authenticatedHandler, updateEndpointSerializer, updateEndpointDeserializer, defaultConfig);\nexport { updateEndpoint };\n//# sourceMappingURL=updateEndpoint.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}