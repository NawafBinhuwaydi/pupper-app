{"ast":null,"code":"import _objectSpread from\"/home/nawaf/pupper-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useQuery,useMutation,useQueryClient}from'react-query';import{dogsApi,apiUtils}from'../services/api';import{toast}from'react-toastify';// Query keys\nexport const QUERY_KEYS={DOGS:'dogs',DOG:'dog'};// Hook to fetch all dogs with filters\nexport const useDogs=function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return useQuery([QUERY_KEYS.DOGS,filters],()=>dogsApi.getDogs(filters),_objectSpread({staleTime:2*60*1000,// 2 minutes\ncacheTime:5*60*1000,// 5 minutes\nonError:error=>{const errorInfo=apiUtils.handleError(error);toast.error(\"Failed to load dogs: \".concat(errorInfo.message));}},options));};// Hook to fetch single dog\nexport const useDog=function(dogId){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return useQuery([QUERY_KEYS.DOG,dogId],()=>dogsApi.getDog(dogId),_objectSpread({enabled:!!dogId,staleTime:5*60*1000,// 5 minutes\ncacheTime:10*60*1000,// 10 minutes\nonError:error=>{const errorInfo=apiUtils.handleError(error);toast.error(\"Failed to load dog details: \".concat(errorInfo.message));}},options));};// Hook to vote on a dog\nexport const useVoteDog=()=>{const queryClient=useQueryClient();return useMutation(_ref=>{let{dogId,voteData}=_ref;return dogsApi.voteDog(dogId,voteData);},{onSuccess:(data,variables)=>{const{dogId}=variables;// Update the dog's vote counts in cache\nqueryClient.setQueryData([QUERY_KEYS.DOG,dogId],oldData=>{if(!oldData)return oldData;const updatedDog=_objectSpread({},oldData.data);if(variables.voteData.vote_type==='wag'){updatedDog.wag_count=(updatedDog.wag_count||0)+1;}else if(variables.voteData.vote_type==='growl'){updatedDog.growl_count=(updatedDog.growl_count||0)+1;}return _objectSpread(_objectSpread({},oldData),{},{data:updatedDog});});// Show success message\nconst voteType=variables.voteData.vote_type==='wag'?'🐕 Wag':'😤 Growl';toast.success(\"\".concat(voteType,\" recorded successfully!\"));},onError:error=>{const errorInfo=apiUtils.handleError(error);toast.error(\"Failed to record vote: \".concat(errorInfo.message));}});};// Custom hook for managing favorites (using localStorage)\nexport const useFavorites=()=>{const getFavorites=()=>{try{const favorites=localStorage.getItem('pupperFavorites');return favorites?JSON.parse(favorites):[];}catch(error){console.error('Error reading favorites:',error);return[];}};const addToFavorites=dogId=>{try{const favorites=getFavorites();if(!favorites.includes(dogId)){const newFavorites=[...favorites,dogId];localStorage.setItem('pupperFavorites',JSON.stringify(newFavorites));toast.success('Added to favorites! ❤️');return newFavorites;}return favorites;}catch(error){console.error('Error adding to favorites:',error);toast.error('Failed to add to favorites');return getFavorites();}};const removeFromFavorites=dogId=>{try{const favorites=getFavorites();const newFavorites=favorites.filter(id=>id!==dogId);localStorage.setItem('pupperFavorites',JSON.stringify(newFavorites));toast.success('Removed from favorites');return newFavorites;}catch(error){console.error('Error removing from favorites:',error);toast.error('Failed to remove from favorites');return getFavorites();}};const isFavorite=dogId=>{const favorites=getFavorites();return favorites.includes(dogId);};const toggleFavorite=dogId=>{if(isFavorite(dogId)){return removeFromFavorites(dogId);}else{return addToFavorites(dogId);}};return{favorites:getFavorites(),addToFavorites,removeFromFavorites,isFavorite,toggleFavorite};};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}