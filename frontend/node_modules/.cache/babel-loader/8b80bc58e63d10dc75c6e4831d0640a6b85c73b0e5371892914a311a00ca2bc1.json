{"ast":null,"code":"import { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../common/AuthErrorStrings.mjs';\nimport '../../errors/types/validation.mjs';\nimport '../../providers/cognito/types/errors.mjs';\nimport { createListWebAuthnCredentialsClient } from '../factories/serviceClients/cognitoIdentityProvider/createListWebAuthnCredentialsClient.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function listWebAuthnCredentials(amplify, input) {\n  var _amplify$getConfig$Au;\n  const authConfig = (_amplify$getConfig$Au = amplify.getConfig().Auth) === null || _amplify$getConfig$Au === void 0 ? void 0 : _amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await amplify.Auth.fetchAuthSession();\n  assertAuthTokens(tokens);\n  const listWebAuthnCredentialsResult = createListWebAuthnCredentialsClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    Credentials: commandCredentials = [],\n    NextToken: nextToken\n  } = await listWebAuthnCredentialsResult({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ListWebAuthnCredentials)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    MaxResults: input === null || input === void 0 ? void 0 : input.pageSize,\n    NextToken: input === null || input === void 0 ? void 0 : input.nextToken\n  });\n  const credentials = commandCredentials.map(item => ({\n    credentialId: item.CredentialId,\n    friendlyCredentialName: item.FriendlyCredentialName,\n    relyingPartyId: item.RelyingPartyId,\n    authenticatorAttachment: item.AuthenticatorAttachment,\n    authenticatorTransports: item.AuthenticatorTransports,\n    createdAt: item.CreatedAt ? new Date(item.CreatedAt * 1000) : undefined\n  }));\n  return {\n    credentials,\n    nextToken\n  };\n}\nexport { listWebAuthnCredentials };\n//# sourceMappingURL=listWebAuthnCredentials.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}