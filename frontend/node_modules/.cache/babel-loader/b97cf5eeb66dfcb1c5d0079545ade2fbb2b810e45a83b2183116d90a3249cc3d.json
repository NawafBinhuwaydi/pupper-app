{"ast":null,"code":"import { ConsoleLogger, Amplify, clearCredentials, Hub, defaultStorage } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, assertOAuthConfig, AMPLIFY_SYMBOL, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { DefaultOAuthStore } from '../utils/signInWithRedirectStore.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens, assertAuthTokensWithRefreshToken } from '../utils/types.mjs';\nimport '@aws-crypto/sha256-js';\nimport { handleOAuthSignOut } from '../utils/oauth/handleOAuthSignOut.mjs';\nimport { OAUTH_SIGNOUT_EXCEPTION } from '../../../errors/constants.mjs';\nimport '../../../Errors.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../types/Auth.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport { createRevokeTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRevokeTokenClient.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createGlobalSignOutClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGlobalSignOutClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('Auth');\n/**\n * Signs a user out\n *\n * @param input - The SignOutInput object\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signOut(input) {\n  const cognitoConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(cognitoConfig);\n  if (input?.global) {\n    await globalSignOut(cognitoConfig);\n  } else {\n    await clientSignOut(cognitoConfig);\n  }\n  let hasOAuthConfig;\n  try {\n    assertOAuthConfig(cognitoConfig);\n    hasOAuthConfig = true;\n  } catch (err) {\n    hasOAuthConfig = false;\n  }\n  if (hasOAuthConfig) {\n    const oAuthStore = new DefaultOAuthStore(defaultStorage);\n    oAuthStore.setAuthConfig(cognitoConfig);\n    const {\n      type\n    } = (await handleOAuthSignOut(cognitoConfig, oAuthStore, tokenOrchestrator, input?.oauth?.redirectUrl)) ?? {};\n    if (type === 'error') {\n      throw new AuthError({\n        name: OAUTH_SIGNOUT_EXCEPTION,\n        message: `An error occurred when attempting to log out from OAuth provider.`\n      });\n    }\n  } else {\n    // complete sign out\n    tokenOrchestrator.clearTokens();\n    await clearCredentials();\n    Hub.dispatch('auth', {\n      event: 'signedOut'\n    }, 'Auth', AMPLIFY_SYMBOL);\n  }\n}\nasync function clientSignOut(cognitoConfig) {\n  try {\n    const {\n      userPoolEndpoint,\n      userPoolId,\n      userPoolClientId\n    } = cognitoConfig;\n    const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();\n    assertAuthTokensWithRefreshToken(authTokens);\n    if (isSessionRevocable(authTokens.accessToken)) {\n      const revokeToken = createRevokeTokenClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n          endpointOverride: userPoolEndpoint\n        })\n      });\n      await revokeToken({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)\n      }, {\n        ClientId: userPoolClientId,\n        Token: authTokens.refreshToken\n      });\n    }\n  } catch (err) {\n    // this shouldn't throw\n    logger.debug('Client signOut error caught but will proceed with token removal');\n  }\n}\nasync function globalSignOut(cognitoConfig) {\n  try {\n    const {\n      userPoolEndpoint,\n      userPoolId\n    } = cognitoConfig;\n    const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();\n    assertAuthTokens(authTokens);\n    const globalSignOutClient = createGlobalSignOutClient({\n      endpointResolver: createCognitoUserPoolEndpointResolver({\n        endpointOverride: userPoolEndpoint\n      })\n    });\n    await globalSignOutClient({\n      region: getRegionFromUserPoolId(userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)\n    }, {\n      AccessToken: authTokens.accessToken.toString()\n    });\n  } catch (err) {\n    // it should not throw\n    logger.debug('Global signOut error caught but will proceed with token removal');\n  }\n}\nconst isSessionRevocable = token => !!token?.payload?.origin_jti;\nexport { signOut };\n//# sourceMappingURL=signOut.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}