{"ast":null,"code":"import { base64Decoder } from '../../../utils/convert/base64/base64Decoder.mjs';\nimport '../../../types/errors.mjs';\nimport '../../../errors/errorHelpers.mjs';\nimport { assert, AuthConfigurationErrorCode } from './errorHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction assertTokenProviderConfig(cognitoConfig) {\n  let assertionValid = true; // assume valid until otherwise proveed\n  if (!cognitoConfig) {\n    assertionValid = false;\n  } else {\n    assertionValid = !!cognitoConfig.userPoolId && !!cognitoConfig.userPoolClientId;\n  }\n  assert(assertionValid, AuthConfigurationErrorCode.AuthUserPoolException);\n}\nfunction assertOAuthConfig(cognitoConfig) {\n  var _cognitoConfig$loginW, _cognitoConfig$loginW2, _cognitoConfig$loginW3, _cognitoConfig$loginW4;\n  const validOAuthConfig = !!(cognitoConfig !== null && cognitoConfig !== void 0 && (_cognitoConfig$loginW = cognitoConfig.loginWith) !== null && _cognitoConfig$loginW !== void 0 && (_cognitoConfig$loginW = _cognitoConfig$loginW.oauth) !== null && _cognitoConfig$loginW !== void 0 && _cognitoConfig$loginW.domain) && !!(cognitoConfig !== null && cognitoConfig !== void 0 && (_cognitoConfig$loginW2 = cognitoConfig.loginWith) !== null && _cognitoConfig$loginW2 !== void 0 && (_cognitoConfig$loginW2 = _cognitoConfig$loginW2.oauth) !== null && _cognitoConfig$loginW2 !== void 0 && _cognitoConfig$loginW2.redirectSignOut) && !!(cognitoConfig !== null && cognitoConfig !== void 0 && (_cognitoConfig$loginW3 = cognitoConfig.loginWith) !== null && _cognitoConfig$loginW3 !== void 0 && (_cognitoConfig$loginW3 = _cognitoConfig$loginW3.oauth) !== null && _cognitoConfig$loginW3 !== void 0 && _cognitoConfig$loginW3.redirectSignIn) && !!(cognitoConfig !== null && cognitoConfig !== void 0 && (_cognitoConfig$loginW4 = cognitoConfig.loginWith) !== null && _cognitoConfig$loginW4 !== void 0 && (_cognitoConfig$loginW4 = _cognitoConfig$loginW4.oauth) !== null && _cognitoConfig$loginW4 !== void 0 && _cognitoConfig$loginW4.responseType);\n  assert(validOAuthConfig, AuthConfigurationErrorCode.OAuthNotConfigureException);\n}\nfunction assertIdentityPoolIdConfig(cognitoConfig) {\n  const validConfig = !!(cognitoConfig !== null && cognitoConfig !== void 0 && cognitoConfig.identityPoolId);\n  assert(validConfig, AuthConfigurationErrorCode.InvalidIdentityPoolIdException);\n}\n/**\n * Decodes payload of JWT token\n *\n * @param {String} token A string representing a token to be decoded\n * @throws {@link Error} - Throws error when token is invalid or payload malformed.\n */\nfunction decodeJWT(token) {\n  const tokenParts = token.split('.');\n  if (tokenParts.length !== 3) {\n    throw new Error('Invalid token');\n  }\n  try {\n    const base64WithUrlSafe = tokenParts[1];\n    const base64 = base64WithUrlSafe.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonStr = decodeURIComponent(base64Decoder.convert(base64).split('').map(char => \"%\".concat(\"00\".concat(char.charCodeAt(0).toString(16)).slice(-2))).join(''));\n    const payload = JSON.parse(jsonStr);\n    return {\n      toString: () => token,\n      payload\n    };\n  } catch (err) {\n    throw new Error('Invalid token payload');\n  }\n}\nexport { assertIdentityPoolIdConfig, assertOAuthConfig, assertTokenProviderConfig, decodeJWT };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}