{"ast":null,"code":"import { AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData.mjs';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { handlePasswordSRP } from '../shared/handlePasswordSRP.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { setActiveSignInUsername } from '../../../providers/cognito/utils/setActiveSignInUsername.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Handles user authentication flow with configurable challenge preferences.\n * Supports AuthFactorType challenges through the USER_AUTH flow.\n *\n * @param {HandleUserAuthFlowInput} params - Authentication flow parameters\n * @param {string} params.username - The username for authentication\n * @param {Record<string, string>} [params.clientMetadata] - Optional metadata to pass to authentication service\n * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration\n * @param {AuthTokenOrchestrator} params.tokenOrchestrator - Manages authentication tokens and device tracking\n * @param {AuthFactorType} [params.preferredChallenge] - Optional preferred authentication method\n * @param {string} [params.password] - Required when preferredChallenge is 'PASSWORD' or 'PASSWORD_SRP'\n *\n * @returns {Promise<InitiateAuthCommandOutput>} The authentication response from Cognito\n */\nasync function handleUserAuthFlow(_ref) {\n  let {\n    username,\n    clientMetadata,\n    config,\n    tokenOrchestrator,\n    preferredChallenge,\n    password,\n    session\n  } = _ref;\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const authParameters = {\n    USERNAME: username\n  };\n  if (preferredChallenge) {\n    if (preferredChallenge === 'PASSWORD_SRP') {\n      assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n      return handlePasswordSRP({\n        username,\n        password,\n        clientMetadata,\n        config,\n        tokenOrchestrator,\n        authFlow: 'USER_AUTH',\n        preferredChallenge\n      });\n    }\n    if (preferredChallenge === 'PASSWORD') {\n      assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n      authParameters.PASSWORD = password;\n    }\n    authParameters.PREFERRED_CHALLENGE = preferredChallenge;\n  }\n  const jsonReq = {\n    AuthFlow: 'USER_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  if (session) {\n    jsonReq.Session = session;\n  }\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await initiateAuth({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  // Set the active username immediately after successful authentication attempt\n  // If a user starts a new sign-in while another sign-in is incomplete,\n  // this ensures we're tracking the correct user for subsequent auth challenges.\n  setActiveSignInUsername(username);\n  return response;\n}\nexport { handleUserAuthFlow };\n//# sourceMappingURL=handleUserAuthFlow.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}