{"ast":null,"code":"import _objectSpread from \"/home/nawaf/aws-project/pupper-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { ConsoleLogger } from './Logger/ConsoleLogger.mjs';\nimport { AmplifyError } from './errors/AmplifyError.mjs';\nimport './types/errors.mjs';\nimport './errors/errorHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('parseAWSExports');\nconst authTypeMapping = {\n  API_KEY: 'apiKey',\n  AWS_IAM: 'iam',\n  AMAZON_COGNITO_USER_POOLS: 'userPool',\n  OPENID_CONNECT: 'oidc',\n  NONE: 'none',\n  AWS_LAMBDA: 'lambda',\n  // `LAMBDA` is an incorrect value that was added during the v6 rewrite.\n  // Keeping it as a valid value until v7 to prevent breaking customers who might\n  // be relying on it as a workaround.\n  // ref: https://github.com/aws-amplify/amplify-js/pull/12922\n  // TODO: @v7 remove next line\n  LAMBDA: 'lambda'\n};\n/**\n * Converts the object imported from `aws-exports.js` or `amplifyconfiguration.json` files generated by\n * the Amplify CLI into an object that conforms to the {@link ResourcesConfig}.\n *\n * @param config A configuration object imported  from `aws-exports.js` or `amplifyconfiguration.json`.\n *\n * @returns An object that conforms to the {@link ResourcesConfig} .\n */\nconst parseAWSExports = function () {\n  var _aws_cognito_mfa_type, _aws_cognito_mfa_type2, _aws_cognito_password, _aws_cognito_password2, _aws_cognito_password3, _aws_cognito_password4, _aws_cognito_password5, _aws_cognito_password6, _aws_cognito_password7, _aws_cognito_password8, _aws_cognito_username, _aws_cognito_username2;\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!Object.prototype.hasOwnProperty.call(config, 'aws_project_region')) {\n    throw new AmplifyError({\n      name: 'InvalidParameterException',\n      message: 'Invalid config parameter.',\n      recoverySuggestion: 'Ensure passing the config object imported from  `amplifyconfiguration.json`.'\n    });\n  }\n  const {\n    aws_appsync_apiKey,\n    aws_appsync_authenticationType,\n    aws_appsync_graphqlEndpoint,\n    aws_appsync_region,\n    aws_bots_config,\n    aws_cognito_identity_pool_id,\n    aws_cognito_sign_up_verification_method,\n    aws_cognito_mfa_configuration,\n    aws_cognito_mfa_types,\n    aws_cognito_password_protection_settings,\n    aws_cognito_verification_mechanisms,\n    aws_cognito_signup_attributes,\n    aws_cognito_social_providers,\n    aws_cognito_username_attributes,\n    aws_mandatory_sign_in,\n    aws_mobile_analytics_app_id,\n    aws_mobile_analytics_app_region,\n    aws_user_files_s3_bucket,\n    aws_user_files_s3_bucket_region,\n    aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing,\n    aws_user_pools_id,\n    aws_user_pools_web_client_id,\n    geo,\n    oauth,\n    predictions,\n    aws_cloud_logic_custom,\n    Notifications,\n    modelIntrospection\n  } = config;\n  const amplifyConfig = {};\n  // Analytics\n  if (aws_mobile_analytics_app_id) {\n    amplifyConfig.Analytics = {\n      Pinpoint: {\n        appId: aws_mobile_analytics_app_id,\n        region: aws_mobile_analytics_app_region\n      }\n    };\n  }\n  // Notifications\n  const {\n    InAppMessaging,\n    Push\n  } = Notifications !== null && Notifications !== void 0 ? Notifications : {};\n  if (InAppMessaging !== null && InAppMessaging !== void 0 && InAppMessaging.AWSPinpoint || Push !== null && Push !== void 0 && Push.AWSPinpoint) {\n    if (InAppMessaging !== null && InAppMessaging !== void 0 && InAppMessaging.AWSPinpoint) {\n      const {\n        appId,\n        region\n      } = InAppMessaging.AWSPinpoint;\n      amplifyConfig.Notifications = {\n        InAppMessaging: {\n          Pinpoint: {\n            appId,\n            region\n          }\n        }\n      };\n    }\n    if (Push !== null && Push !== void 0 && Push.AWSPinpoint) {\n      const {\n        appId,\n        region\n      } = Push.AWSPinpoint;\n      amplifyConfig.Notifications = _objectSpread(_objectSpread({}, amplifyConfig.Notifications), {}, {\n        PushNotification: {\n          Pinpoint: {\n            appId,\n            region\n          }\n        }\n      });\n    }\n  }\n  // Interactions\n  if (Array.isArray(aws_bots_config)) {\n    amplifyConfig.Interactions = {\n      LexV1: Object.fromEntries(aws_bots_config.map(bot => [bot.name, bot]))\n    };\n  }\n  // API\n  if (aws_appsync_graphqlEndpoint) {\n    const defaultAuthMode = authTypeMapping[aws_appsync_authenticationType];\n    if (!defaultAuthMode) {\n      logger.debug(\"Invalid authentication type \".concat(aws_appsync_authenticationType, \". Falling back to IAM.\"));\n    }\n    amplifyConfig.API = {\n      GraphQL: {\n        endpoint: aws_appsync_graphqlEndpoint,\n        apiKey: aws_appsync_apiKey,\n        region: aws_appsync_region,\n        defaultAuthMode: defaultAuthMode !== null && defaultAuthMode !== void 0 ? defaultAuthMode : 'iam'\n      }\n    };\n    if (modelIntrospection) {\n      amplifyConfig.API.GraphQL.modelIntrospection = modelIntrospection;\n    }\n  }\n  // Auth\n  const mfaConfig = aws_cognito_mfa_configuration ? {\n    status: aws_cognito_mfa_configuration && aws_cognito_mfa_configuration.toLowerCase(),\n    totpEnabled: (_aws_cognito_mfa_type = aws_cognito_mfa_types === null || aws_cognito_mfa_types === void 0 ? void 0 : aws_cognito_mfa_types.includes('TOTP')) !== null && _aws_cognito_mfa_type !== void 0 ? _aws_cognito_mfa_type : false,\n    smsEnabled: (_aws_cognito_mfa_type2 = aws_cognito_mfa_types === null || aws_cognito_mfa_types === void 0 ? void 0 : aws_cognito_mfa_types.includes('SMS')) !== null && _aws_cognito_mfa_type2 !== void 0 ? _aws_cognito_mfa_type2 : false\n  } : undefined;\n  const passwordFormatConfig = aws_cognito_password_protection_settings ? {\n    minLength: aws_cognito_password_protection_settings.passwordPolicyMinLength,\n    requireLowercase: (_aws_cognito_password = (_aws_cognito_password2 = aws_cognito_password_protection_settings.passwordPolicyCharacters) === null || _aws_cognito_password2 === void 0 ? void 0 : _aws_cognito_password2.includes('REQUIRES_LOWERCASE')) !== null && _aws_cognito_password !== void 0 ? _aws_cognito_password : false,\n    requireUppercase: (_aws_cognito_password3 = (_aws_cognito_password4 = aws_cognito_password_protection_settings.passwordPolicyCharacters) === null || _aws_cognito_password4 === void 0 ? void 0 : _aws_cognito_password4.includes('REQUIRES_UPPERCASE')) !== null && _aws_cognito_password3 !== void 0 ? _aws_cognito_password3 : false,\n    requireNumbers: (_aws_cognito_password5 = (_aws_cognito_password6 = aws_cognito_password_protection_settings.passwordPolicyCharacters) === null || _aws_cognito_password6 === void 0 ? void 0 : _aws_cognito_password6.includes('REQUIRES_NUMBERS')) !== null && _aws_cognito_password5 !== void 0 ? _aws_cognito_password5 : false,\n    requireSpecialCharacters: (_aws_cognito_password7 = (_aws_cognito_password8 = aws_cognito_password_protection_settings.passwordPolicyCharacters) === null || _aws_cognito_password8 === void 0 ? void 0 : _aws_cognito_password8.includes('REQUIRES_SYMBOLS')) !== null && _aws_cognito_password7 !== void 0 ? _aws_cognito_password7 : false\n  } : undefined;\n  const mergedUserAttributes = Array.from(new Set([...(aws_cognito_verification_mechanisms !== null && aws_cognito_verification_mechanisms !== void 0 ? aws_cognito_verification_mechanisms : []), ...(aws_cognito_signup_attributes !== null && aws_cognito_signup_attributes !== void 0 ? aws_cognito_signup_attributes : [])]));\n  const userAttributes = mergedUserAttributes.reduce((attributes, key) => _objectSpread(_objectSpread({}, attributes), {}, {\n    // All user attributes generated by the CLI are required\n    [key.toLowerCase()]: {\n      required: true\n    }\n  }), {});\n  const loginWithEmailEnabled = (_aws_cognito_username = aws_cognito_username_attributes === null || aws_cognito_username_attributes === void 0 ? void 0 : aws_cognito_username_attributes.includes('EMAIL')) !== null && _aws_cognito_username !== void 0 ? _aws_cognito_username : false;\n  const loginWithPhoneEnabled = (_aws_cognito_username2 = aws_cognito_username_attributes === null || aws_cognito_username_attributes === void 0 ? void 0 : aws_cognito_username_attributes.includes('PHONE_NUMBER')) !== null && _aws_cognito_username2 !== void 0 ? _aws_cognito_username2 : false;\n  if (aws_cognito_identity_pool_id || aws_user_pools_id) {\n    amplifyConfig.Auth = {\n      Cognito: {\n        identityPoolId: aws_cognito_identity_pool_id,\n        allowGuestAccess: aws_mandatory_sign_in !== 'enable',\n        signUpVerificationMethod: aws_cognito_sign_up_verification_method,\n        userAttributes,\n        userPoolClientId: aws_user_pools_web_client_id,\n        userPoolId: aws_user_pools_id,\n        mfa: mfaConfig,\n        passwordFormat: passwordFormatConfig,\n        loginWith: {\n          username: !(loginWithEmailEnabled || loginWithPhoneEnabled),\n          email: loginWithEmailEnabled,\n          phone: loginWithPhoneEnabled\n        }\n      }\n    };\n  }\n  const hasOAuthConfig = oauth ? Object.keys(oauth).length > 0 : false;\n  const hasSocialProviderConfig = aws_cognito_social_providers ? aws_cognito_social_providers.length > 0 : false;\n  if (amplifyConfig.Auth && hasOAuthConfig) {\n    amplifyConfig.Auth.Cognito.loginWith = _objectSpread(_objectSpread({}, amplifyConfig.Auth.Cognito.loginWith), {}, {\n      oauth: _objectSpread(_objectSpread({}, getOAuthConfig(oauth)), hasSocialProviderConfig && {\n        providers: parseSocialProviders(aws_cognito_social_providers)\n      })\n    });\n  }\n  // Storage\n  if (aws_user_files_s3_bucket) {\n    amplifyConfig.Storage = {\n      S3: {\n        bucket: aws_user_files_s3_bucket,\n        region: aws_user_files_s3_bucket_region,\n        dangerouslyConnectToHttpEndpointForTesting: aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing\n      }\n    };\n  }\n  // Geo\n  if (geo) {\n    const {\n      amazon_location_service\n    } = geo;\n    amplifyConfig.Geo = {\n      LocationService: {\n        maps: amazon_location_service.maps,\n        geofenceCollections: amazon_location_service.geofenceCollections,\n        searchIndices: amazon_location_service.search_indices,\n        region: amazon_location_service.region\n      }\n    };\n  }\n  // REST API\n  if (aws_cloud_logic_custom) {\n    amplifyConfig.API = _objectSpread(_objectSpread({}, amplifyConfig.API), {}, {\n      REST: aws_cloud_logic_custom.reduce((acc, api) => {\n        const {\n          name,\n          endpoint,\n          region,\n          service\n        } = api;\n        return _objectSpread(_objectSpread({}, acc), {}, {\n          [name]: _objectSpread(_objectSpread({\n            endpoint\n          }, service ? {\n            service\n          } : undefined), region ? {\n            region\n          } : undefined)\n        });\n      }, {})\n    });\n  }\n  // Predictions\n  if (predictions) {\n    var _predictions$convert$, _predictions$convert;\n    // map VoiceId from speechGenerator defaults to voiceId\n    const {\n      VoiceId: voiceId\n    } = (_predictions$convert$ = predictions === null || predictions === void 0 || (_predictions$convert = predictions.convert) === null || _predictions$convert === void 0 || (_predictions$convert = _predictions$convert.speechGenerator) === null || _predictions$convert === void 0 ? void 0 : _predictions$convert.defaults) !== null && _predictions$convert$ !== void 0 ? _predictions$convert$ : {};\n    amplifyConfig.Predictions = voiceId ? _objectSpread(_objectSpread({}, predictions), {}, {\n      convert: _objectSpread(_objectSpread({}, predictions.convert), {}, {\n        speechGenerator: _objectSpread(_objectSpread({}, predictions.convert.speechGenerator), {}, {\n          defaults: {\n            voiceId\n          }\n        })\n      })\n    }) : predictions;\n  }\n  return amplifyConfig;\n};\nconst getRedirectUrl = redirectStr => {\n  var _redirectStr$split;\n  return (_redirectStr$split = redirectStr === null || redirectStr === void 0 ? void 0 : redirectStr.split(',')) !== null && _redirectStr$split !== void 0 ? _redirectStr$split : [];\n};\nconst getOAuthConfig = _ref => {\n  let {\n    domain,\n    scope,\n    redirectSignIn,\n    redirectSignOut,\n    responseType\n  } = _ref;\n  return {\n    domain,\n    scopes: scope,\n    redirectSignIn: getRedirectUrl(redirectSignIn),\n    redirectSignOut: getRedirectUrl(redirectSignOut),\n    responseType\n  };\n};\nconst parseSocialProviders = aws_cognito_social_providers => {\n  return aws_cognito_social_providers.map(provider => {\n    const updatedProvider = provider.toLowerCase();\n    return updatedProvider.charAt(0).toUpperCase() + updatedProvider.slice(1);\n  });\n};\nexport { parseAWSExports };\n//# sourceMappingURL=parseAWSExports.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}