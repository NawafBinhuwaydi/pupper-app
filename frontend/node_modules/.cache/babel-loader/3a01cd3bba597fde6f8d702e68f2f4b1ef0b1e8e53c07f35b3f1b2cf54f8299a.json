{"ast":null,"code":"import { parseMetadata } from './responseInfo.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Utility functions for serializing and deserializing of JSON protocol in general(including: REST-JSON, JSON-RPC, etc.)\n */\n/**\n * Error parser for AWS JSON protocol.\n */\nconst parseJsonError = async response => {\n  if (!response || response.statusCode < 300) {\n    return;\n  }\n  const body = await parseJsonBody(response);\n  const sanitizeErrorCode = rawValue => {\n    const [cleanValue] = rawValue.toString().split(/[,:]+/);\n    if (cleanValue.includes('#')) {\n      return cleanValue.split('#')[1];\n    }\n    return cleanValue;\n  };\n  const code = sanitizeErrorCode(response.headers['x-amzn-errortype'] ?? body.code ?? body.__type ?? 'UnknownError');\n  const message = body.message ?? body.Message ?? 'Unknown error';\n  const error = new Error(message);\n  return Object.assign(error, {\n    name: code,\n    $metadata: parseMetadata(response)\n  });\n};\n/**\n * Parse JSON response body to JavaScript object.\n */\nconst parseJsonBody = async response => {\n  if (!response.body) {\n    throw new Error('Missing response payload');\n  }\n  const output = await response.body.json();\n  return Object.assign(output, {\n    $metadata: parseMetadata(response)\n  });\n};\nexport { parseJsonBody, parseJsonError };\n//# sourceMappingURL=json.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}