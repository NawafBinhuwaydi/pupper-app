{"ast":null,"code":"import { createAssertionFunction, AmplifyError, AmplifyErrorCode } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nclass PasskeyError extends AmplifyError {\n  constructor(params) {\n    super(params);\n    // Hack for making the custom error class work when transpiled to es5\n    // TODO: Delete the following 2 lines after we change the build target to >= es2015\n    this.constructor = PasskeyError;\n    Object.setPrototypeOf(this, PasskeyError.prototype);\n  }\n}\nvar PasskeyErrorCode;\n(function (PasskeyErrorCode) {\n  // not supported\n  PasskeyErrorCode[\"PasskeyNotSupported\"] = \"PasskeyNotSupported\";\n  // duplicate passkey\n  PasskeyErrorCode[\"PasskeyAlreadyExists\"] = \"PasskeyAlreadyExists\";\n  // misconfigurations\n  PasskeyErrorCode[\"InvalidPasskeyRegistrationOptions\"] = \"InvalidPasskeyRegistrationOptions\";\n  PasskeyErrorCode[\"InvalidPasskeyAuthenticationOptions\"] = \"InvalidPasskeyAuthenticationOptions\";\n  PasskeyErrorCode[\"RelyingPartyMismatch\"] = \"RelyingPartyMismatch\";\n  // failed credential creation / retrieval\n  PasskeyErrorCode[\"PasskeyRegistrationFailed\"] = \"PasskeyRegistrationFailed\";\n  PasskeyErrorCode[\"PasskeyRetrievalFailed\"] = \"PasskeyRetrievalFailed\";\n  // cancel / aborts\n  PasskeyErrorCode[\"PasskeyRegistrationCanceled\"] = \"PasskeyRegistrationCanceled\";\n  PasskeyErrorCode[\"PasskeyAuthenticationCanceled\"] = \"PasskeyAuthenticationCanceled\";\n  PasskeyErrorCode[\"PasskeyOperationAborted\"] = \"PasskeyOperationAborted\";\n})(PasskeyErrorCode || (PasskeyErrorCode = {}));\nconst notSupportedRecoverySuggestion = 'Passkeys may not be supported on this device. Ensure your application is running in a secure context (HTTPS) and Web Authentication API is supported.';\nconst abortOrCancelRecoverySuggestion = 'User may have canceled the ceremony or another interruption has occurred. Check underlying error for details.';\nconst misconfigurationRecoverySuggestion = 'Ensure your user pool is configured to support the WEB_AUTHN as an authentication factor.';\nconst passkeyErrorMap = {\n  [PasskeyErrorCode.PasskeyNotSupported]: {\n    message: 'Passkeys may not be supported on this device.',\n    recoverySuggestion: notSupportedRecoverySuggestion\n  },\n  [PasskeyErrorCode.InvalidPasskeyRegistrationOptions]: {\n    message: 'Invalid passkey registration options.',\n    recoverySuggestion: misconfigurationRecoverySuggestion\n  },\n  [PasskeyErrorCode.InvalidPasskeyAuthenticationOptions]: {\n    message: 'Invalid passkey authentication options.',\n    recoverySuggestion: misconfigurationRecoverySuggestion\n  },\n  [PasskeyErrorCode.PasskeyRegistrationFailed]: {\n    message: 'Device failed to create passkey.',\n    recoverySuggestion: notSupportedRecoverySuggestion\n  },\n  [PasskeyErrorCode.PasskeyRetrievalFailed]: {\n    message: 'Device failed to retrieve passkey.',\n    recoverySuggestion: 'Passkeys may not be available on this device. Try an alternative authentication factor like PASSWORD, EMAIL_OTP, or SMS_OTP.'\n  },\n  [PasskeyErrorCode.PasskeyAlreadyExists]: {\n    message: 'Passkey already exists in authenticator.',\n    recoverySuggestion: 'Proceed with existing passkey or try again after deleting the credential.'\n  },\n  [PasskeyErrorCode.PasskeyRegistrationCanceled]: {\n    message: 'Passkey registration ceremony has been canceled.',\n    recoverySuggestion: abortOrCancelRecoverySuggestion\n  },\n  [PasskeyErrorCode.PasskeyAuthenticationCanceled]: {\n    message: 'Passkey authentication ceremony has been canceled.',\n    recoverySuggestion: abortOrCancelRecoverySuggestion\n  },\n  [PasskeyErrorCode.PasskeyOperationAborted]: {\n    message: 'Passkey operation has been aborted.',\n    recoverySuggestion: abortOrCancelRecoverySuggestion\n  },\n  [PasskeyErrorCode.RelyingPartyMismatch]: {\n    message: 'Relying party does not match current domain.',\n    recoverySuggestion: 'Ensure relying party identifier matches current domain.'\n  }\n};\nconst assertPasskeyError = createAssertionFunction(passkeyErrorMap, PasskeyError);\n/**\n * Handle Passkey Authentication Errors\n * https://w3c.github.io/webauthn/#sctn-get-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nconst handlePasskeyAuthenticationError = err => {\n  if (err instanceof PasskeyError) {\n    return err;\n  }\n  if (err instanceof Error) {\n    if (err.name === 'NotAllowedError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.PasskeyAuthenticationCanceled];\n      return new PasskeyError({\n        name: PasskeyErrorCode.PasskeyAuthenticationCanceled,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n  }\n  return handlePasskeyError(err);\n};\n/**\n * Handle Passkey Registration Errors\n * https://w3c.github.io/webauthn/#sctn-create-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nconst handlePasskeyRegistrationError = err => {\n  if (err instanceof PasskeyError) {\n    return err;\n  }\n  if (err instanceof Error) {\n    // Duplicate Passkey\n    if (err.name === 'InvalidStateError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.PasskeyAlreadyExists];\n      return new PasskeyError({\n        name: PasskeyErrorCode.PasskeyAlreadyExists,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n    // User Cancels Ceremony / Generic Catch All\n    if (err.name === 'NotAllowedError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.PasskeyRegistrationCanceled];\n      return new PasskeyError({\n        name: PasskeyErrorCode.PasskeyRegistrationCanceled,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n  }\n  return handlePasskeyError(err);\n};\n/**\n * Handles Overlapping Passkey Errors Between Registration & Authentication\n * https://w3c.github.io/webauthn/#sctn-create-request-exceptions\n * https://w3c.github.io/webauthn/#sctn-get-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nconst handlePasskeyError = err => {\n  if (err instanceof Error) {\n    // Passkey Operation Aborted\n    if (err.name === 'AbortError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.PasskeyOperationAborted];\n      return new PasskeyError({\n        name: PasskeyErrorCode.PasskeyOperationAborted,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n    // Relying Party / Domain Mismatch\n    if (err.name === 'SecurityError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.RelyingPartyMismatch];\n      return new PasskeyError({\n        name: PasskeyErrorCode.RelyingPartyMismatch,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n  }\n  return new PasskeyError({\n    name: AmplifyErrorCode.Unknown,\n    message: 'An unknown error has occurred.',\n    underlyingError: err\n  });\n};\nexport { PasskeyError, PasskeyErrorCode, assertPasskeyError, handlePasskeyAuthenticationError, handlePasskeyRegistrationError };\n//# sourceMappingURL=errors.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}