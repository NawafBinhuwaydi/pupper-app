{"ast":null,"code":"import _objectSpread from\"/home/nawaf/pupper-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useQuery,useMutation,useQueryClient}from'react-query';import{dogsApi,apiUtils}from'../services/api';import{toast}from'react-toastify';import{useState,useEffect}from'react';// Query keys\nexport const QUERY_KEYS={DOGS:'dogs',DOG:'dog'};// Hook to fetch all dogs with filters\nexport const useDogs=function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return useQuery([QUERY_KEYS.DOGS,filters],()=>dogsApi.getDogs(filters),_objectSpread({staleTime:2*60*1000,// 2 minutes\ncacheTime:5*60*1000,// 5 minutes\nonError:error=>{const errorInfo=apiUtils.handleError(error);if(process.env.NODE_ENV==='development'){console.error('Dogs query error:',errorInfo);}// Only show toast for non-network errors to avoid spam\nif(errorInfo.status!==0){toast.error(\"Failed to load dogs: \".concat(errorInfo.message));}}},options));};// Hook to fetch a single dog by ID\nexport const useDogDetails=function(dogId){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return useQuery([QUERY_KEYS.DOG,dogId],()=>dogsApi.getDog(dogId),_objectSpread({enabled:!!dogId,// Only run query if dogId exists\nstaleTime:5*60*1000,// 5 minutes\ncacheTime:10*60*1000,// 10 minutes\nonError:error=>{const errorInfo=apiUtils.handleError(error);if(process.env.NODE_ENV==='development'){console.error('Dog query error:',errorInfo);}if(errorInfo.status!==0){toast.error(\"Failed to load dog details: \".concat(errorInfo.message));}}},options));};// Hook to vote on a dog\nexport const useVoteDog=()=>{const queryClient=useQueryClient();return useMutation(_ref=>{let{dogId,voteData}=_ref;return dogsApi.voteDog(dogId,voteData);},{onSuccess:(data,variables)=>{// Invalidate and refetch dogs list\nqueryClient.invalidateQueries([QUERY_KEYS.DOGS]);// Invalidate specific dog query\nqueryClient.invalidateQueries([QUERY_KEYS.DOG,variables.dogId]);const voteType=variables.voteData.vote_type==='wag'?'👍':'👎';toast.success(\"\".concat(voteType,\" Vote recorded!\"));},onError:error=>{const errorInfo=apiUtils.handleError(error);toast.error(\"Failed to record vote: \".concat(errorInfo.message));}});};// Hook to update a dog\nexport const useUpdateDog=()=>{const queryClient=useQueryClient();return useMutation(_ref2=>{let{dogId,updates}=_ref2;return dogsApi.updateDog(dogId,updates);},{onSuccess:(data,variables)=>{// Invalidate and refetch dogs list\nqueryClient.invalidateQueries([QUERY_KEYS.DOGS]);// Invalidate specific dog query\nqueryClient.invalidateQueries([QUERY_KEYS.DOG,variables.dogId]);toast.success('Dog updated successfully! 🐕');},onError:error=>{const errorInfo=apiUtils.handleError(error);toast.error(\"Failed to update dog: \".concat(errorInfo.message));}});};// Hook to delete a dog\nexport const useDeleteDog=()=>{const queryClient=useQueryClient();return useMutation(dogId=>dogsApi.deleteDog(dogId),{onSuccess:data=>{// Invalidate and refetch dogs list\nqueryClient.invalidateQueries([QUERY_KEYS.DOGS]);toast.success(\"\".concat(data.data.dog_name,\" has been removed from the system\"));},onError:error=>{const errorInfo=apiUtils.handleError(error);toast.error(\"Failed to delete dog: \".concat(errorInfo.message));}});};// Hook to manage favorites (using localStorage)\nexport const useFavorites=()=>{const[favorites,setFavorites]=useState([]);useEffect(()=>{const savedFavorites=localStorage.getItem('pupper-favorites');if(savedFavorites){try{setFavorites(JSON.parse(savedFavorites));}catch(error){console.error('Error parsing favorites from localStorage:',error);setFavorites([]);}}},[]);const toggleFavorite=dogId=>{setFavorites(prev=>{const newFavorites=prev.includes(dogId)?prev.filter(id=>id!==dogId):[...prev,dogId];localStorage.setItem('pupper-favorites',JSON.stringify(newFavorites));return newFavorites;});};const isFavorite=dogId=>{return favorites.includes(dogId);};const clearFavorites=()=>{setFavorites([]);localStorage.removeItem('pupper-favorites');};return{favorites,toggleFavorite,isFavorite,clearFavorites};};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}