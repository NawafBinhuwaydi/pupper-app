{"ast":null,"code":"import { createGetIdClient } from '@aws-amplify/core';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { getRegionFromIdentityPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport '@aws-amplify/core/internals/utils';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport { createCognitoIdentityPoolEndpointResolver } from '../factories/createCognitoIdentityPoolEndpointResolver.mjs';\nimport { formLoginsMap } from './utils.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Provides a Cognito identityId\n *\n * @param tokens - The AuthTokens received after SignIn\n * @returns string\n * @throws configuration exceptions: `InvalidIdentityPoolIdException`\n *  - Auth errors that may arise from misconfiguration.\n * @throws service exceptions: {@link GetIdException }\n */\nasync function cognitoIdentityIdProvider(_ref) {\n  let {\n    tokens,\n    authConfig,\n    identityIdStore\n  } = _ref;\n  identityIdStore.setAuthConfig({\n    Cognito: authConfig\n  });\n  // will return null only if there is no identityId cached or if there is an error retrieving it\n  const identityId = await identityIdStore.loadIdentityId();\n  if (identityId) {\n    return identityId.id;\n  }\n  const logins = tokens !== null && tokens !== void 0 && tokens.idToken ? formLoginsMap(tokens.idToken.toString()) : {};\n  const generatedIdentityId = await generateIdentityId(logins, authConfig);\n  // Store generated identityId\n  identityIdStore.storeIdentityId({\n    id: generatedIdentityId,\n    type: tokens ? 'primary' : 'guest'\n  });\n  return generatedIdentityId;\n}\nasync function generateIdentityId(logins, authConfig) {\n  const identityPoolId = authConfig === null || authConfig === void 0 ? void 0 : authConfig.identityPoolId;\n  const region = getRegionFromIdentityPoolId(identityPoolId);\n  const getId = createGetIdClient({\n    endpointResolver: createCognitoIdentityPoolEndpointResolver({\n      endpointOverride: authConfig.identityPoolEndpoint\n    })\n  });\n  // IdentityId is absent so get it using IdentityPoolId with Cognito's GetId API\n  let idResult;\n  // for a first-time user, this will return a brand new identity\n  // for a returning user, this will retrieve the previous identity assocaited with the logins\n  try {\n    idResult = (await getId({\n      region\n    }, {\n      IdentityPoolId: identityPoolId,\n      Logins: logins\n    })).IdentityId;\n  } catch (e) {\n    assertServiceError(e);\n    throw new AuthError(e);\n  }\n  if (!idResult) {\n    throw new AuthError({\n      name: 'GetIdResponseException',\n      message: 'Received undefined response from getId operation',\n      recoverySuggestion: 'Make sure to pass a valid identityPoolId in the configuration.'\n    });\n  }\n  return idResult;\n}\nexport { cognitoIdentityIdProvider };\n//# sourceMappingURL=IdentityIdProvider.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}