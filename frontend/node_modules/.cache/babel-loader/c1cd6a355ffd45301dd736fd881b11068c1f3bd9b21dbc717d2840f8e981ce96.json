{"ast":null,"code":"import _objectSpread from \"/home/nawaf/aws-project/pupper-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { cacheCognitoTokens } from '../../../providers/cognito/tokenProvider/cacheTokens.mjs';\nimport { dispatchSignedInHubEvent } from '../../../providers/cognito/utils/dispatchSignedInHubEvent.mjs';\nimport '../../utils/store/autoSignInStore.mjs';\nimport { signInStore, setActiveSignInState } from '../../utils/store/signInStore.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { assertPasskeyError, PasskeyErrorCode } from '../../utils/passkey/errors.mjs';\nimport { getPasskey } from '../../utils/passkey/getPasskey.mjs';\nimport { getNewDeviceMetadata } from '../../../providers/cognito/utils/getNewDeviceMetadata.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function handleWebAuthnSignInResult(challengeParameters) {\n  var _Amplify$getConfig$Au;\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    username,\n    signInSession,\n    signInDetails,\n    challengeName\n  } = signInStore.getState();\n  if (challengeName !== 'WEB_AUTHN' || !username) {\n    throw new AuthError({\n      name: AuthErrorCodes.SignInException,\n      message: 'Unable to proceed due to invalid sign in state.'\n    });\n  }\n  const {\n    CREDENTIAL_REQUEST_OPTIONS: credentialRequestOptions\n  } = challengeParameters;\n  assertPasskeyError(!!credentialRequestOptions, PasskeyErrorCode.InvalidPasskeyAuthenticationOptions);\n  const cred = await getPasskey(JSON.parse(credentialRequestOptions));\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: authConfig.userPoolEndpoint\n    })\n  });\n  const {\n    ChallengeName: nextChallengeName,\n    ChallengeParameters: nextChallengeParameters,\n    AuthenticationResult: authenticationResult,\n    Session: nextSession\n  } = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, {\n    ChallengeName: 'WEB_AUTHN',\n    ChallengeResponses: {\n      USERNAME: username,\n      CREDENTIAL: JSON.stringify(cred)\n    },\n    ClientId: authConfig.userPoolClientId,\n    Session: signInSession\n  });\n  setActiveSignInState({\n    signInSession: nextSession,\n    username,\n    challengeName: nextChallengeName,\n    signInDetails\n  });\n  if (authenticationResult) {\n    await cacheCognitoTokens(_objectSpread(_objectSpread({}, authenticationResult), {}, {\n      username,\n      NewDeviceMetadata: await getNewDeviceMetadata({\n        userPoolId: authConfig.userPoolId,\n        userPoolEndpoint: authConfig.userPoolEndpoint,\n        newDeviceMetadata: authenticationResult.NewDeviceMetadata,\n        accessToken: authenticationResult.AccessToken\n      }),\n      signInDetails\n    }));\n    signInStore.dispatch({\n      type: 'RESET_STATE'\n    });\n    await dispatchSignedInHubEvent();\n    return {\n      isSignedIn: true,\n      nextStep: {\n        signInStep: 'DONE'\n      }\n    };\n  }\n  if (nextChallengeName === 'WEB_AUTHN') {\n    throw new AuthError({\n      name: AuthErrorCodes.SignInException,\n      message: 'Sequential WEB_AUTHN challenges returned from underlying service cannot be handled.'\n    });\n  }\n  return {\n    challengeName: nextChallengeName,\n    challengeParameters: nextChallengeParameters\n  };\n}\nexport { handleWebAuthnSignInResult };\n//# sourceMappingURL=handleWebAuthnSignInResult.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}