{"ast":null,"code":"import { AmplifyErrorCode } from '../../../types/errors.mjs';\nimport { isClockSkewError } from './isClockSkewError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Get retry decider function\n * @param errorParser Function to load JavaScript error from HTTP response\n */\nconst getRetryDecider = errorParser => async (response, error) => {\n  var _ref;\n  const parsedError = (_ref = error !== null && error !== void 0 ? error : await errorParser(response)) !== null && _ref !== void 0 ? _ref : undefined;\n  const errorCode = (parsedError === null || parsedError === void 0 ? void 0 : parsedError.code) || (parsedError === null || parsedError === void 0 ? void 0 : parsedError.name);\n  const statusCode = response === null || response === void 0 ? void 0 : response.statusCode;\n  const isRetryable = isConnectionError(error) || isThrottlingError(statusCode, errorCode) || isClockSkewError(errorCode) || isServerSideError(statusCode, errorCode);\n  return {\n    retryable: isRetryable\n  };\n};\n// reference: https://github.com/aws/aws-sdk-js-v3/blob/ab0e7be36e7e7f8a0c04834357aaad643c7912c3/packages/service-error-classification/src/constants.ts#L22-L37\nconst THROTTLING_ERROR_CODES = ['BandwidthLimitExceeded', 'EC2ThrottledException', 'LimitExceededException', 'PriorRequestNotComplete', 'ProvisionedThroughputExceededException', 'RequestLimitExceeded', 'RequestThrottled', 'RequestThrottledException', 'SlowDown', 'ThrottledException', 'Throttling', 'ThrottlingException', 'TooManyRequestsException'];\nconst TIMEOUT_ERROR_CODES = ['TimeoutError', 'RequestTimeout', 'RequestTimeoutException'];\nconst isThrottlingError = (statusCode, errorCode) => statusCode === 429 || !!errorCode && THROTTLING_ERROR_CODES.includes(errorCode);\nconst isConnectionError = error => [AmplifyErrorCode.NetworkError,\n// TODO(vNext): unify the error code `ERR_NETWORK` used by the Storage XHR handler\n'ERR_NETWORK'].includes(error === null || error === void 0 ? void 0 : error.name);\nconst isServerSideError = (statusCode, errorCode) => !!statusCode && [500, 502, 503, 504].includes(statusCode) || !!errorCode && TIMEOUT_ERROR_CODES.includes(errorCode);\nexport { getRetryDecider };\n//# sourceMappingURL=defaultRetryDecider.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}