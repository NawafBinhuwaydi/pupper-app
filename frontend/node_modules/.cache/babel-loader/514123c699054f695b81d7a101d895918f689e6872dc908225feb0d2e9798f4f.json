{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { toAttributeType } from '../utils/apiHelpers.mjs';\nimport { handleCodeAutoSignIn, autoSignInUserConfirmed, autoSignInWhenUserIsConfirmedWithLink } from '../utils/signUpHelpers.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport { createSignUpClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createSignUpClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { autoSignInStore } from '../../../client/utils/store/autoSignInStore.mjs';\nimport '../../../client/utils/store/signInStore.mjs';\nimport { setAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Creates a user\n *\n * @param input - The SignUpInput object\n * @returns SignUpOutput\n * @throws service: {@link SignUpException } - Cognito service errors thrown during the sign-up process.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signUp(input) {\n  var _Amplify$getConfig$Au, _authConfig$signUpVer, _input$options;\n  const {\n    username,\n    password,\n    options\n  } = input;\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  const signUpVerificationMethod = (_authConfig$signUpVer = authConfig === null || authConfig === void 0 ? void 0 : authConfig.signUpVerificationMethod) !== null && _authConfig$signUpVer !== void 0 ? _authConfig$signUpVer : 'code';\n  const {\n    clientMetadata,\n    validationData,\n    autoSignIn\n  } = (_input$options = input.options) !== null && _input$options !== void 0 ? _input$options : {};\n  assertTokenProviderConfig(authConfig);\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n  const signInServiceOptions = typeof autoSignIn !== 'boolean' ? autoSignIn : undefined;\n  const signInInput = {\n    username,\n    options: signInServiceOptions\n  };\n  // if the authFlowType is 'CUSTOM_WITHOUT_SRP' then we don't include the password\n  if ((signInServiceOptions === null || signInServiceOptions === void 0 ? void 0 : signInServiceOptions.authFlowType) !== 'CUSTOM_WITHOUT_SRP') {\n    signInInput.password = password;\n  }\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = authConfig;\n  const signUpClient = createSignUpClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const signUpClientInput = {\n    Username: username,\n    Password: undefined,\n    UserAttributes: (options === null || options === void 0 ? void 0 : options.userAttributes) && toAttributeType(options === null || options === void 0 ? void 0 : options.userAttributes),\n    ClientMetadata: clientMetadata,\n    ValidationData: validationData && toAttributeType(validationData),\n    ClientId: userPoolClientId,\n    UserContextData: getUserContextData({\n      username,\n      userPoolId,\n      userPoolClientId\n    })\n  };\n  if (password) {\n    signUpClientInput.Password = password;\n  }\n  const {\n    UserSub: userId,\n    CodeDeliveryDetails: cdd,\n    UserConfirmed: userConfirmed,\n    Session: session\n  } = await signUpClient({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignUp)\n  }, signUpClientInput);\n  if (signInServiceOptions || autoSignIn === true) {\n    autoSignInStore.dispatch({\n      type: 'START'\n    });\n    autoSignInStore.dispatch({\n      type: 'SET_USERNAME',\n      value: username\n    });\n    autoSignInStore.dispatch({\n      type: 'SET_SESSION',\n      value: session\n    });\n  }\n  const codeDeliveryDetails = {\n    destination: cdd === null || cdd === void 0 ? void 0 : cdd.Destination,\n    deliveryMedium: cdd === null || cdd === void 0 ? void 0 : cdd.DeliveryMedium,\n    attributeName: cdd === null || cdd === void 0 ? void 0 : cdd.AttributeName\n  };\n  const isSignUpComplete = !!userConfirmed;\n  const isAutoSignInStarted = autoSignInStore.getState().active;\n  // Sign Up Complete\n  // No Confirm Sign In Step Required\n  if (isSignUpComplete) {\n    if (isAutoSignInStarted) {\n      setAutoSignIn(autoSignInUserConfirmed(signInInput));\n      return {\n        isSignUpComplete: true,\n        nextStep: {\n          signUpStep: 'COMPLETE_AUTO_SIGN_IN'\n        },\n        userId\n      };\n    }\n    return {\n      isSignUpComplete: true,\n      nextStep: {\n        signUpStep: 'DONE'\n      },\n      userId\n    };\n  }\n  // Sign Up Not Complete\n  // Confirm Sign Up Step Required\n  if (isAutoSignInStarted) {\n    // Confirmation Via Link Occurs In Separate Context\n    // AutoSignIn Fn Will Initiate Polling Once Executed\n    if (signUpVerificationMethod === 'link') {\n      setAutoSignIn(autoSignInWhenUserIsConfirmedWithLink(signInInput));\n      return {\n        isSignUpComplete: false,\n        nextStep: {\n          signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n          codeDeliveryDetails\n        },\n        userId\n      };\n    }\n    // Confirmation Via Code Occurs In Same Context\n    // AutoSignIn Next Step Will Be Returned From Confirm Sign Up\n    handleCodeAutoSignIn(signInInput);\n  }\n  return {\n    isSignUpComplete: false,\n    nextStep: {\n      signUpStep: 'CONFIRM_SIGN_UP',\n      codeDeliveryDetails\n    },\n    userId\n  };\n}\nexport { signUp };\n//# sourceMappingURL=signUp.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}