{"ast":null,"code":"import { Framework } from './types.mjs';\nimport { version } from './version.mjs';\nimport { detectFramework, observeFrameworkChanges } from './detectFramework.mjs';\nimport { getCustomUserAgent } from './customUserAgent.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst BASE_USER_AGENT = \"aws-amplify\";\n/** Sanitize Amplify version string be removing special character + and character post the special character  */\nconst sanitizeAmplifyVersion = amplifyVersion => amplifyVersion.replace(/\\+.*/, '');\nclass PlatformBuilder {\n  constructor() {\n    this.userAgent = \"\".concat(BASE_USER_AGENT, \"/\").concat(sanitizeAmplifyVersion(version));\n  }\n  get framework() {\n    return detectFramework();\n  }\n  get isReactNative() {\n    return this.framework === Framework.ReactNative || this.framework === Framework.Expo;\n  }\n  observeFrameworkChanges(fcn) {\n    observeFrameworkChanges(fcn);\n  }\n}\nconst Platform = new PlatformBuilder();\nconst getAmplifyUserAgentObject = function () {\n  let {\n    category,\n    action\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const userAgent = [[BASE_USER_AGENT, sanitizeAmplifyVersion(version)]];\n  if (category) {\n    userAgent.push([category, action]);\n  }\n  userAgent.push(['framework', detectFramework()]);\n  if (category && action) {\n    const customState = getCustomUserAgent(category, action);\n    if (customState) {\n      customState.forEach(state => {\n        userAgent.push(state);\n      });\n    }\n  }\n  return userAgent;\n};\nconst getAmplifyUserAgent = customUserAgentDetails => {\n  const userAgent = getAmplifyUserAgentObject(customUserAgentDetails);\n  const userAgentString = userAgent.map(_ref => {\n    let [agentKey, agentValue] = _ref;\n    return agentKey && agentValue ? \"\".concat(agentKey, \"/\").concat(agentValue) : agentKey;\n  }).join(' ');\n  return userAgentString;\n};\nexport { Platform, getAmplifyUserAgent, getAmplifyUserAgentObject, sanitizeAmplifyVersion };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}