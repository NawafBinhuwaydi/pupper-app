{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Returns a canonical query string.\n *\n * @param searchParams `searchParams` from the request url.\n * @returns URL-encoded query string parameters, separated by ampersands (&). Percent-encode reserved characters,\n * including the space character. Encode names and values separately. If there are empty parameters, append the equals\n * sign to the parameter name before encoding. After encoding, sort the parameters alphabetically by key name. If there\n * is no query string, use an empty string (\"\").\n *\n * @internal\n */\nconst getCanonicalQueryString = searchParams => Array.from(searchParams).sort((_ref, _ref2) => {\n  let [keyA, valA] = _ref;\n  let [keyB, valB] = _ref2;\n  if (keyA === keyB) {\n    return valA < valB ? -1 : 1;\n  }\n  return keyA < keyB ? -1 : 1;\n}).map(_ref3 => {\n  let [key, val] = _ref3;\n  return \"\".concat(escapeUri(key), \"=\").concat(escapeUri(val));\n}).join('&');\nconst escapeUri = uri => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);\nconst hexEncode = c => \"%\".concat(c.charCodeAt(0).toString(16).toUpperCase());\nexport { getCanonicalQueryString };\n//# sourceMappingURL=getCanonicalQueryString.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}