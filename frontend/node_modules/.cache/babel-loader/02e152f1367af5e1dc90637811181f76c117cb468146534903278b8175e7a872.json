{"ast":null,"code":"import { AmplifyError } from '../../errors/AmplifyError.mjs';\nimport { AmplifyErrorCode } from '../../types/errors.mjs';\nimport '../../errors/errorHelpers.mjs';\nimport { withMemoization } from '../utils/memoization.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst shouldSendBody = method => !['HEAD', 'GET', 'DELETE'].includes(method.toUpperCase());\n// TODO[AllanZhengYP]: we need to provide isCanceledError utility\nconst fetchTransferHandler = async ({\n  url,\n  method,\n  headers,\n  body\n}, {\n  abortSignal,\n  cache,\n  withCrossDomainCredentials\n}) => {\n  let resp;\n  try {\n    resp = await fetch(url, {\n      method,\n      headers,\n      body: shouldSendBody(method) ? body : undefined,\n      signal: abortSignal,\n      cache,\n      credentials: withCrossDomainCredentials ? 'include' : 'same-origin'\n    });\n  } catch (e) {\n    if (e instanceof TypeError) {\n      throw new AmplifyError({\n        name: AmplifyErrorCode.NetworkError,\n        message: 'A network error has occurred.',\n        underlyingError: e\n      });\n    }\n    throw e;\n  }\n  const responseHeaders = {};\n  resp.headers?.forEach((value, key) => {\n    responseHeaders[key.toLowerCase()] = value;\n  });\n  const httpResponse = {\n    statusCode: resp.status,\n    headers: responseHeaders,\n    body: null\n  };\n  // resp.body is a ReadableStream according to Fetch API spec, but React Native\n  // does not implement it.\n  const bodyWithMixin = Object.assign(resp.body ?? {}, {\n    text: withMemoization(() => resp.text()),\n    blob: withMemoization(() => resp.blob()),\n    json: withMemoization(() => resp.json())\n  });\n  return {\n    ...httpResponse,\n    body: bodyWithMixin\n  };\n};\nexport { fetchTransferHandler };\n//# sourceMappingURL=fetch.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}