{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { dogsApi, apiUtils } from '../services/api';\nimport { toast } from 'react-toastify';\nimport { useState, useEffect } from 'react';\n\n// Query keys\nexport const QUERY_KEYS = {\n  DOGS: 'dogs',\n  DOG: 'dog'\n};\n\n// Hook to fetch all dogs with filters\nexport const useDogs = (filters = {}, options = {}) => {\n  _s();\n  return useQuery([QUERY_KEYS.DOGS, filters], () => dogsApi.getDogs(filters), {\n    staleTime: 2 * 60 * 1000,\n    // 2 minutes\n    cacheTime: 5 * 60 * 1000,\n    // 5 minutes\n    onError: error => {\n      const errorInfo = apiUtils.handleError(error);\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Dogs query error:', errorInfo);\n      }\n      // Only show toast for non-network errors to avoid spam\n      if (errorInfo.status !== 0) {\n        toast.error(`Failed to load dogs: ${errorInfo.message}`);\n      }\n    },\n    ...options\n  });\n};\n\n// Hook to fetch a single dog by ID\n_s(useDogs, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useDogDetails = (dogId, options = {}) => {\n  _s2();\n  return useQuery([QUERY_KEYS.DOG, dogId], () => dogsApi.getDog(dogId), {\n    enabled: !!dogId,\n    // Only run query if dogId exists\n    staleTime: 5 * 60 * 1000,\n    // 5 minutes\n    cacheTime: 10 * 60 * 1000,\n    // 10 minutes\n    onError: error => {\n      const errorInfo = apiUtils.handleError(error);\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Dog query error:', errorInfo);\n      }\n      if (errorInfo.status !== 0) {\n        toast.error(`Failed to load dog details: ${errorInfo.message}`);\n      }\n    },\n    ...options\n  });\n};\n\n// Hook to vote on a dog\n_s2(useDogDetails, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useVoteDog = () => {\n  _s3();\n  const queryClient = useQueryClient();\n  return useMutation(({\n    dogId,\n    voteData\n  }) => dogsApi.voteDog(dogId, voteData), {\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch dogs list\n      queryClient.invalidateQueries([QUERY_KEYS.DOGS]);\n      // Invalidate specific dog query\n      queryClient.invalidateQueries([QUERY_KEYS.DOG, variables.dogId]);\n      const voteType = variables.voteData.vote_type === 'wag' ? '👍' : '👎';\n      toast.success(`${voteType} Vote recorded!`);\n    },\n    onError: error => {\n      const errorInfo = apiUtils.handleError(error);\n      toast.error(`Failed to record vote: ${errorInfo.message}`);\n    }\n  });\n};\n\n// Hook to manage favorites (using localStorage)\n_s3(useVoteDog, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useFavorites = () => {\n  _s4();\n  const [favorites, setFavorites] = useState([]);\n  useEffect(() => {\n    const savedFavorites = localStorage.getItem('pupper-favorites');\n    if (savedFavorites) {\n      try {\n        setFavorites(JSON.parse(savedFavorites));\n      } catch (error) {\n        console.error('Error parsing favorites from localStorage:', error);\n        setFavorites([]);\n      }\n    }\n  }, []);\n  const toggleFavorite = dogId => {\n    setFavorites(prev => {\n      const newFavorites = prev.includes(dogId) ? prev.filter(id => id !== dogId) : [...prev, dogId];\n      localStorage.setItem('pupper-favorites', JSON.stringify(newFavorites));\n      return newFavorites;\n    });\n  };\n  const isFavorite = dogId => {\n    return favorites.includes(dogId);\n  };\n  const clearFavorites = () => {\n    setFavorites([]);\n    localStorage.removeItem('pupper-favorites');\n  };\n  return {\n    favorites,\n    toggleFavorite,\n    isFavorite,\n    clearFavorites\n  };\n};\n_s4(useFavorites, \"gYNGUuNbE7AW8shO5JZPpsJJ/gw=\");","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","dogsApi","apiUtils","toast","useState","useEffect","QUERY_KEYS","DOGS","DOG","useDogs","filters","options","_s","getDogs","staleTime","cacheTime","onError","error","errorInfo","handleError","process","env","NODE_ENV","console","status","message","useDogDetails","dogId","_s2","getDog","enabled","useVoteDog","_s3","queryClient","voteData","voteDog","onSuccess","data","variables","invalidateQueries","voteType","vote_type","success","useFavorites","_s4","favorites","setFavorites","savedFavorites","localStorage","getItem","JSON","parse","toggleFavorite","prev","newFavorites","includes","filter","id","setItem","stringify","isFavorite","clearFavorites","removeItem"],"sources":["/home/nawaf/pupper-app/frontend/src/hooks/useDogs.js"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { dogsApi, apiUtils } from '../services/api';\nimport { toast } from 'react-toastify';\nimport { useState, useEffect } from 'react';\n\n// Query keys\nexport const QUERY_KEYS = {\n  DOGS: 'dogs',\n  DOG: 'dog',\n};\n\n// Hook to fetch all dogs with filters\nexport const useDogs = (filters = {}, options = {}) => {\n  return useQuery(\n    [QUERY_KEYS.DOGS, filters],\n    () => dogsApi.getDogs(filters),\n    {\n      staleTime: 2 * 60 * 1000, // 2 minutes\n      cacheTime: 5 * 60 * 1000, // 5 minutes\n      onError: (error) => {\n        const errorInfo = apiUtils.handleError(error);\n        if (process.env.NODE_ENV === 'development') {\n          console.error('Dogs query error:', errorInfo);\n        }\n        // Only show toast for non-network errors to avoid spam\n        if (errorInfo.status !== 0) {\n          toast.error(`Failed to load dogs: ${errorInfo.message}`);\n        }\n      },\n      ...options,\n    }\n  );\n};\n\n// Hook to fetch a single dog by ID\nexport const useDogDetails = (dogId, options = {}) => {\n  return useQuery(\n    [QUERY_KEYS.DOG, dogId],\n    () => dogsApi.getDog(dogId),\n    {\n      enabled: !!dogId, // Only run query if dogId exists\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      cacheTime: 10 * 60 * 1000, // 10 minutes\n      onError: (error) => {\n        const errorInfo = apiUtils.handleError(error);\n        if (process.env.NODE_ENV === 'development') {\n          console.error('Dog query error:', errorInfo);\n        }\n        if (errorInfo.status !== 0) {\n          toast.error(`Failed to load dog details: ${errorInfo.message}`);\n        }\n      },\n      ...options,\n    }\n  );\n};\n\n// Hook to vote on a dog\nexport const useVoteDog = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation(\n    ({ dogId, voteData }) => dogsApi.voteDog(dogId, voteData),\n    {\n      onSuccess: (data, variables) => {\n        // Invalidate and refetch dogs list\n        queryClient.invalidateQueries([QUERY_KEYS.DOGS]);\n        // Invalidate specific dog query\n        queryClient.invalidateQueries([QUERY_KEYS.DOG, variables.dogId]);\n        \n        const voteType = variables.voteData.vote_type === 'wag' ? '👍' : '👎';\n        toast.success(`${voteType} Vote recorded!`);\n      },\n      onError: (error) => {\n        const errorInfo = apiUtils.handleError(error);\n        toast.error(`Failed to record vote: ${errorInfo.message}`);\n      },\n    }\n  );\n};\n\n// Hook to manage favorites (using localStorage)\nexport const useFavorites = () => {\n  const [favorites, setFavorites] = useState([]);\n\n  useEffect(() => {\n    const savedFavorites = localStorage.getItem('pupper-favorites');\n    if (savedFavorites) {\n      try {\n        setFavorites(JSON.parse(savedFavorites));\n      } catch (error) {\n        console.error('Error parsing favorites from localStorage:', error);\n        setFavorites([]);\n      }\n    }\n  }, []);\n\n  const toggleFavorite = (dogId) => {\n    setFavorites(prev => {\n      const newFavorites = prev.includes(dogId)\n        ? prev.filter(id => id !== dogId)\n        : [...prev, dogId];\n      \n      localStorage.setItem('pupper-favorites', JSON.stringify(newFavorites));\n      return newFavorites;\n    });\n  };\n\n  const isFavorite = (dogId) => {\n    return favorites.includes(dogId);\n  };\n\n  const clearFavorites = () => {\n    setFavorites([]);\n    localStorage.removeItem('pupper-favorites');\n  };\n\n  return {\n    favorites,\n    toggleFavorite,\n    isFavorite,\n    clearFavorites,\n  };\n};\n"],"mappings":";;;;AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,cAAc,QAAQ,aAAa;AACnE,SAASC,OAAO,EAAEC,QAAQ,QAAQ,iBAAiB;AACnD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,OAAO,MAAMC,UAAU,GAAG;EACxBC,IAAI,EAAE,MAAM;EACZC,GAAG,EAAE;AACP,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAGA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAAAC,EAAA;EACrD,OAAOd,QAAQ,CACb,CAACQ,UAAU,CAACC,IAAI,EAAEG,OAAO,CAAC,EAC1B,MAAMT,OAAO,CAACY,OAAO,CAACH,OAAO,CAAC,EAC9B;IACEI,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BC,OAAO,EAAGC,KAAK,IAAK;MAClB,MAAMC,SAAS,GAAGhB,QAAQ,CAACiB,WAAW,CAACF,KAAK,CAAC;MAC7C,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QAC1CC,OAAO,CAACN,KAAK,CAAC,mBAAmB,EAAEC,SAAS,CAAC;MAC/C;MACA;MACA,IAAIA,SAAS,CAACM,MAAM,KAAK,CAAC,EAAE;QAC1BrB,KAAK,CAACc,KAAK,CAAC,wBAAwBC,SAAS,CAACO,OAAO,EAAE,CAAC;MAC1D;IACF,CAAC;IACD,GAAGd;EACL,CACF,CAAC;AACH,CAAC;;AAED;AAAAC,EAAA,CAtBaH,OAAO;EAAA,QACXX,QAAQ;AAAA;AAsBjB,OAAO,MAAM4B,aAAa,GAAGA,CAACC,KAAK,EAAEhB,OAAO,GAAG,CAAC,CAAC,KAAK;EAAAiB,GAAA;EACpD,OAAO9B,QAAQ,CACb,CAACQ,UAAU,CAACE,GAAG,EAAEmB,KAAK,CAAC,EACvB,MAAM1B,OAAO,CAAC4B,MAAM,CAACF,KAAK,CAAC,EAC3B;IACEG,OAAO,EAAE,CAAC,CAACH,KAAK;IAAE;IAClBb,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BC,SAAS,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC3BC,OAAO,EAAGC,KAAK,IAAK;MAClB,MAAMC,SAAS,GAAGhB,QAAQ,CAACiB,WAAW,CAACF,KAAK,CAAC;MAC7C,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QAC1CC,OAAO,CAACN,KAAK,CAAC,kBAAkB,EAAEC,SAAS,CAAC;MAC9C;MACA,IAAIA,SAAS,CAACM,MAAM,KAAK,CAAC,EAAE;QAC1BrB,KAAK,CAACc,KAAK,CAAC,+BAA+BC,SAAS,CAACO,OAAO,EAAE,CAAC;MACjE;IACF,CAAC;IACD,GAAGd;EACL,CACF,CAAC;AACH,CAAC;;AAED;AAAAiB,GAAA,CAtBaF,aAAa;EAAA,QACjB5B,QAAQ;AAAA;AAsBjB,OAAO,MAAMiC,UAAU,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC9B,MAAMC,WAAW,GAAGjC,cAAc,CAAC,CAAC;EAEpC,OAAOD,WAAW,CAChB,CAAC;IAAE4B,KAAK;IAAEO;EAAS,CAAC,KAAKjC,OAAO,CAACkC,OAAO,CAACR,KAAK,EAAEO,QAAQ,CAAC,EACzD;IACEE,SAAS,EAAEA,CAACC,IAAI,EAAEC,SAAS,KAAK;MAC9B;MACAL,WAAW,CAACM,iBAAiB,CAAC,CAACjC,UAAU,CAACC,IAAI,CAAC,CAAC;MAChD;MACA0B,WAAW,CAACM,iBAAiB,CAAC,CAACjC,UAAU,CAACE,GAAG,EAAE8B,SAAS,CAACX,KAAK,CAAC,CAAC;MAEhE,MAAMa,QAAQ,GAAGF,SAAS,CAACJ,QAAQ,CAACO,SAAS,KAAK,KAAK,GAAG,IAAI,GAAG,IAAI;MACrEtC,KAAK,CAACuC,OAAO,CAAC,GAAGF,QAAQ,iBAAiB,CAAC;IAC7C,CAAC;IACDxB,OAAO,EAAGC,KAAK,IAAK;MAClB,MAAMC,SAAS,GAAGhB,QAAQ,CAACiB,WAAW,CAACF,KAAK,CAAC;MAC7Cd,KAAK,CAACc,KAAK,CAAC,0BAA0BC,SAAS,CAACO,OAAO,EAAE,CAAC;IAC5D;EACF,CACF,CAAC;AACH,CAAC;;AAED;AAAAO,GAAA,CAvBaD,UAAU;EAAA,QACD/B,cAAc,EAE3BD,WAAW;AAAA;AAqBpB,OAAO,MAAM4C,YAAY,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAM0C,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IAC/D,IAAIF,cAAc,EAAE;MAClB,IAAI;QACFD,YAAY,CAACI,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,CAAC;MAC1C,CAAC,CAAC,OAAO9B,KAAK,EAAE;QACdM,OAAO,CAACN,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;QAClE6B,YAAY,CAAC,EAAE,CAAC;MAClB;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,cAAc,GAAIzB,KAAK,IAAK;IAChCmB,YAAY,CAACO,IAAI,IAAI;MACnB,MAAMC,YAAY,GAAGD,IAAI,CAACE,QAAQ,CAAC5B,KAAK,CAAC,GACrC0B,IAAI,CAACG,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAK9B,KAAK,CAAC,GAC/B,CAAC,GAAG0B,IAAI,EAAE1B,KAAK,CAAC;MAEpBqB,YAAY,CAACU,OAAO,CAAC,kBAAkB,EAAER,IAAI,CAACS,SAAS,CAACL,YAAY,CAAC,CAAC;MACtE,OAAOA,YAAY;IACrB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMM,UAAU,GAAIjC,KAAK,IAAK;IAC5B,OAAOkB,SAAS,CAACU,QAAQ,CAAC5B,KAAK,CAAC;EAClC,CAAC;EAED,MAAMkC,cAAc,GAAGA,CAAA,KAAM;IAC3Bf,YAAY,CAAC,EAAE,CAAC;IAChBE,YAAY,CAACc,UAAU,CAAC,kBAAkB,CAAC;EAC7C,CAAC;EAED,OAAO;IACLjB,SAAS;IACTO,cAAc;IACdQ,UAAU;IACVC;EACF,CAAC;AACH,CAAC;AAACjB,GAAA,CAzCWD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}