{"ast":null,"code":"import { assertCredentialIsPkcWithAuthenticatorAttestationResponse } from './types/index.mjs';\nimport { deserializeJsonToPkcCreationOptions, serializePkcWithAttestationToJson } from './serde.mjs';\nimport { assertPasskeyError, PasskeyErrorCode, handlePasskeyRegistrationError } from './errors.mjs';\nimport { getIsPasskeySupported } from './getIsPasskeySupported.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Registers a new passkey for user\n * @param input - PasskeyCreateOptionsJson\n * @returns serialized PasskeyCreateResult\n */\nconst registerPasskey = async input => {\n  try {\n    const isPasskeySupported = getIsPasskeySupported();\n    assertPasskeyError(isPasskeySupported, PasskeyErrorCode.PasskeyNotSupported);\n    const passkeyCreationOptions = deserializeJsonToPkcCreationOptions(input);\n    const credential = await navigator.credentials.create({\n      publicKey: passkeyCreationOptions\n    });\n    assertCredentialIsPkcWithAuthenticatorAttestationResponse(credential);\n    return serializePkcWithAttestationToJson(credential);\n  } catch (err) {\n    throw handlePasskeyRegistrationError(err);\n  }\n};\nexport { registerPasskey };\n//# sourceMappingURL=registerPasskey.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}