{"ast":null,"code":"import { AuthAction } from '@aws-amplify/core/internals/utils';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getAuthenticationHelper } from '../../../providers/cognito/utils/srp/getAuthenticationHelper.mjs';\nimport '../../../providers/cognito/utils/srp/constants.mjs';\nimport '@aws-crypto/sha256-js';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData.mjs';\nimport { setActiveSignInUsername } from '../../../providers/cognito/utils/setActiveSignInUsername.mjs';\nimport { retryOnResourceNotFoundException } from '../../../providers/cognito/utils/retryOnResourceNotFoundException.mjs';\nimport { handlePasswordVerifierChallenge } from '../../../providers/cognito/utils/handlePasswordVerifierChallenge.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Handles the SELECT_CHALLENGE response specifically for Password SRP authentication.\n * This function combines the SELECT_CHALLENGE flow with Password SRP protocol.\n *\n * @param {string} username - The username for authentication\n * @param {string} password - The user's password\n * @param {ClientMetadata} [clientMetadata] - Optional metadata to be sent with auth requests\n * @param {CognitoUserPoolConfig} config - Cognito User Pool configuration\n * @param {string} session - The current authentication session token\n * @param {AuthTokenOrchestrator} tokenOrchestrator - Token orchestrator for managing auth tokens\n *\n * @returns {Promise<RespondToAuthChallengeCommandOutput>} The challenge response\n */\nasync function handleSelectChallengeWithPasswordSRP(username, password, clientMetadata, config, session, tokenOrchestrator) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const userPoolName = userPoolId.split('_')[1] || '';\n  const authenticationHelper = await getAuthenticationHelper(userPoolName);\n  const authParameters = {\n    ANSWER: 'PASSWORD_SRP',\n    USERNAME: username,\n    SRP_A: authenticationHelper.A.toString(16)\n  };\n  const userContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, {\n    ChallengeName: 'SELECT_CHALLENGE',\n    ChallengeResponses: authParameters,\n    ClientId: userPoolClientId,\n    ClientMetadata: clientMetadata,\n    Session: session,\n    UserContextData: userContextData\n  });\n  const activeUsername = response.ChallengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  if (response.ChallengeName === 'PASSWORD_VERIFIER') {\n    return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [password, response.ChallengeParameters, clientMetadata, response.Session, authenticationHelper, config, tokenOrchestrator], activeUsername, tokenOrchestrator);\n  }\n  return response;\n}\nexport { handleSelectChallengeWithPasswordSRP };\n//# sourceMappingURL=handleSelectChallengeWithPasswordSRP.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}