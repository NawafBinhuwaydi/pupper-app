{"ast":null,"code":"import { HubInternal } from '@aws-amplify/core/internals/utils';\nimport { signIn } from '../apis/signIn.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { setAutoSignIn, resetAutoSignIn } from '../apis/autoSignIn.mjs';\nimport { AUTO_SIGN_IN_EXCEPTION } from '../../../errors/constants.mjs';\nimport { signInWithUserAuth } from '../apis/signInWithUserAuth.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1000;\nfunction handleCodeAutoSignIn(signInInput) {\n  const stopHubListener = HubInternal.listen('auth-internal', async ({\n    payload\n  }) => {\n    switch (payload.event) {\n      case 'confirmSignUp':\n        {\n          const response = payload.data;\n          if (response?.isSignUpComplete) {\n            HubInternal.dispatch('auth-internal', {\n              event: 'autoSignIn'\n            });\n            setAutoSignIn(autoSignInWithCode(signInInput));\n            stopHubListener();\n          }\n        }\n    }\n  });\n  // This will stop the listener if confirmSignUp is not resolved.\n  const timeOutId = setTimeout(() => {\n    stopHubListener();\n    clearTimeout(timeOutId);\n    resetAutoSignIn();\n  }, MAX_AUTOSIGNIN_POLLING_MS);\n}\nfunction debounce(fun, delay) {\n  let timer;\n  return args => {\n    if (!timer) {\n      fun(...args);\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      timer = undefined;\n    }, delay);\n  };\n}\nfunction handleAutoSignInWithLink(signInInput, resolve, reject) {\n  const start = Date.now();\n  const autoSignInPollingIntervalId = setInterval(async () => {\n    const elapsedTime = Date.now() - start;\n    const maxTime = MAX_AUTOSIGNIN_POLLING_MS;\n    if (elapsedTime > maxTime) {\n      clearInterval(autoSignInPollingIntervalId);\n      reject(new AuthError({\n        name: AUTO_SIGN_IN_EXCEPTION,\n        message: 'The account was not confirmed on time.',\n        recoverySuggestion: 'Try to verify your account by clicking the link sent your email or phone and then login manually.'\n      }));\n      resetAutoSignIn();\n    } else {\n      try {\n        const signInOutput = await signIn(signInInput);\n        if (signInOutput.nextStep.signInStep !== 'CONFIRM_SIGN_UP') {\n          resolve(signInOutput);\n          clearInterval(autoSignInPollingIntervalId);\n          resetAutoSignIn();\n        }\n      } catch (error) {\n        clearInterval(autoSignInPollingIntervalId);\n        reject(error);\n        resetAutoSignIn();\n      }\n    }\n  }, 5000);\n}\nconst debouncedAutoSignInWithLink = debounce(handleAutoSignInWithLink, 300);\nconst debouncedAutoSignWithCodeOrUserConfirmed = debounce(handleAutoSignInWithCodeOrUserConfirmed, 300);\nfunction autoSignInWhenUserIsConfirmedWithLink(signInInput) {\n  return async () => {\n    return new Promise((resolve, reject) => {\n      debouncedAutoSignInWithLink([signInInput, resolve, reject]);\n    });\n  };\n}\nasync function handleAutoSignInWithCodeOrUserConfirmed(signInInput, resolve, reject) {\n  try {\n    const output = signInInput?.options?.authFlowType === 'USER_AUTH' ? await signInWithUserAuth(signInInput) : await signIn(signInInput);\n    resolve(output);\n    resetAutoSignIn();\n  } catch (error) {\n    reject(error);\n    resetAutoSignIn();\n  }\n}\nfunction autoSignInWithCode(signInInput) {\n  return async () => {\n    return new Promise((resolve, reject) => {\n      debouncedAutoSignWithCodeOrUserConfirmed([signInInput, resolve, reject]);\n    });\n  };\n}\nconst autoSignInUserConfirmed = autoSignInWithCode;\nexport { autoSignInUserConfirmed, autoSignInWhenUserIsConfirmedWithLink, handleCodeAutoSignIn };\n//# sourceMappingURL=signUpHelpers.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}