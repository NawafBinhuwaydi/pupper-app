{"ast":null,"code":"import rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nconst _state = {};\nfunction v1(options, buf, offset) {\n  var _options$_v, _options;\n  let bytes;\n  const isV6 = (_options$_v = (_options = options) === null || _options === void 0 ? void 0 : _options._v6) !== null && _options$_v !== void 0 ? _options$_v : false;\n  if (options) {\n    const optionsKeys = Object.keys(options);\n    if (optionsKeys.length === 1 && optionsKeys[0] === '_v6') {\n      options = undefined;\n    }\n  }\n  if (options) {\n    var _ref, _options$random, _options$rng, _options2;\n    bytes = v1Bytes((_ref = (_options$random = options.random) !== null && _options$random !== void 0 ? _options$random : (_options$rng = (_options2 = options).rng) === null || _options$rng === void 0 ? void 0 : _options$rng.call(_options2)) !== null && _ref !== void 0 ? _ref : rng(), options.msecs, options.nsecs, options.clockseq, options.node, buf, offset);\n  } else {\n    const now = Date.now();\n    const rnds = rng();\n    updateV1State(_state, now, rnds);\n    bytes = v1Bytes(rnds, _state.msecs, _state.nsecs, isV6 ? undefined : _state.clockseq, isV6 ? undefined : _state.node, buf, offset);\n  }\n  return buf !== null && buf !== void 0 ? buf : unsafeStringify(bytes);\n}\nexport function updateV1State(state, now, rnds) {\n  var _state$msecs, _state$nsecs;\n  (_state$msecs = state.msecs) !== null && _state$msecs !== void 0 ? _state$msecs : state.msecs = -Infinity;\n  (_state$nsecs = state.nsecs) !== null && _state$nsecs !== void 0 ? _state$nsecs : state.nsecs = 0;\n  if (now === state.msecs) {\n    state.nsecs++;\n    if (state.nsecs >= 10000) {\n      state.node = undefined;\n      state.nsecs = 0;\n    }\n  } else if (now > state.msecs) {\n    state.nsecs = 0;\n  } else if (now < state.msecs) {\n    state.node = undefined;\n  }\n  if (!state.node) {\n    state.node = rnds.slice(10, 16);\n    state.node[0] |= 0x01;\n    state.clockseq = (rnds[8] << 8 | rnds[9]) & 0x3fff;\n  }\n  state.msecs = now;\n  return state;\n}\nfunction v1Bytes(rnds, msecs, nsecs, clockseq, node, buf) {\n  let offset = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  if (rnds.length < 16) {\n    throw new Error('Random bytes length must be >= 16');\n  }\n  if (!buf) {\n    buf = new Uint8Array(16);\n    offset = 0;\n  } else {\n    if (offset < 0 || offset + 16 > buf.length) {\n      throw new RangeError(\"UUID byte range \".concat(offset, \":\").concat(offset + 15, \" is out of buffer bounds\"));\n    }\n  }\n  msecs !== null && msecs !== void 0 ? msecs : msecs = Date.now();\n  nsecs !== null && nsecs !== void 0 ? nsecs : nsecs = 0;\n  clockseq !== null && clockseq !== void 0 ? clockseq : clockseq = (rnds[8] << 8 | rnds[9]) & 0x3fff;\n  node !== null && node !== void 0 ? node : node = rnds.slice(10, 16);\n  msecs += 12219292800000;\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  buf[offset++] = tl >>> 24 & 0xff;\n  buf[offset++] = tl >>> 16 & 0xff;\n  buf[offset++] = tl >>> 8 & 0xff;\n  buf[offset++] = tl & 0xff;\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  buf[offset++] = tmh >>> 8 & 0xff;\n  buf[offset++] = tmh & 0xff;\n  buf[offset++] = tmh >>> 24 & 0xf | 0x10;\n  buf[offset++] = tmh >>> 16 & 0xff;\n  buf[offset++] = clockseq >>> 8 | 0x80;\n  buf[offset++] = clockseq & 0xff;\n  for (let n = 0; n < 6; ++n) {\n    buf[offset++] = node[n];\n  }\n  return buf;\n}\nexport default v1;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}