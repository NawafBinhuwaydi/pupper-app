{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { handleUserSRPAuthFlow, getActiveSignInUsername, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { setActiveSignInState, resetActiveSignInState } from '../../../client/utils/store/signInStore.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport '../utils/types.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent.mjs';\nimport { getNewDeviceMetadata } from '../utils/getNewDeviceMetadata.mjs';\nimport { resetAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in\n *\n * @param input - The SignInWithSRPInput object\n * @returns SignInWithSRPOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito service errors\n * thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signInWithSRP(input) {\n  const {\n    username,\n    password\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const signInDetails = {\n    loginId: username,\n    authFlowType: 'USER_SRP_AUTH'\n  };\n  assertTokenProviderConfig(authConfig);\n  const clientMetaData = input.options?.clientMetadata;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n  assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n  try {\n    const {\n      ChallengeName: handledChallengeName,\n      ChallengeParameters: handledChallengeParameters,\n      AuthenticationResult,\n      Session\n    } = await handleUserSRPAuthFlow(username, password, clientMetaData, authConfig, tokenOrchestrator);\n    const activeUsername = getActiveSignInUsername(username);\n    // sets up local state used during the sign-in process\n    setActiveSignInState({\n      signInSession: Session,\n      username: activeUsername,\n      challengeName: handledChallengeName,\n      signInDetails\n    });\n    if (AuthenticationResult) {\n      await cacheCognitoTokens({\n        username: activeUsername,\n        ...AuthenticationResult,\n        NewDeviceMetadata: await getNewDeviceMetadata({\n          userPoolId: authConfig.userPoolId,\n          userPoolEndpoint: authConfig.userPoolEndpoint,\n          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n          accessToken: AuthenticationResult.AccessToken\n        }),\n        signInDetails\n      });\n      resetActiveSignInState();\n      await dispatchSignedInHubEvent();\n      resetAutoSignIn();\n      return {\n        isSignedIn: true,\n        nextStep: {\n          signInStep: 'DONE'\n        }\n      };\n    }\n    return getSignInResult({\n      challengeName: handledChallengeName,\n      challengeParameters: handledChallengeParameters\n    });\n  } catch (error) {\n    resetActiveSignInState();\n    resetAutoSignIn();\n    assertServiceError(error);\n    const result = getSignInResultFromError(error.name);\n    if (result) return result;\n    throw error;\n  }\n}\nexport { signInWithSRP };\n//# sourceMappingURL=signInWithSRP.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}