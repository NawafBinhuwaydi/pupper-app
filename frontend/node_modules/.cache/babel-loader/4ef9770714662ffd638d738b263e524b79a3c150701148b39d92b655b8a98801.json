{"ast":null,"code":"import { signRequest } from './signer/signatureV4/signRequest.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport { getSkewCorrectedDate } from './utils/getSkewCorrectedDate.mjs';\nimport { getUpdatedSystemClockOffset } from './utils/getUpdatedSystemClockOffset.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Middleware that SigV4 signs request with AWS credentials, and correct system clock offset.\n * This middleware is expected to be placed after retry middleware.\n */\nconst signingMiddlewareFactory = _ref => {\n  let {\n    credentials,\n    region,\n    service,\n    uriEscapePath = true\n  } = _ref;\n  let currentSystemClockOffset;\n  return (next, context) => async function signingMiddleware(request) {\n    currentSystemClockOffset = currentSystemClockOffset !== null && currentSystemClockOffset !== void 0 ? currentSystemClockOffset : 0;\n    const signRequestOptions = {\n      credentials: typeof credentials === 'function' ? await credentials({\n        forceRefresh: !!(context !== null && context !== void 0 && context.isCredentialsExpired)\n      }) : credentials,\n      signingDate: getSkewCorrectedDate(currentSystemClockOffset),\n      signingRegion: region,\n      signingService: service,\n      uriEscapePath\n    };\n    const signedRequest = await signRequest(request, signRequestOptions);\n    const response = await next(signedRequest);\n    // Update system clock offset if response contains date header, regardless of the status code.\n    // non-2xx response will still be returned from next handler instead of thrown, because it's\n    // only thrown by the retry middleware.\n    const dateString = getDateHeader(response);\n    if (dateString) {\n      currentSystemClockOffset = getUpdatedSystemClockOffset(Date.parse(dateString), currentSystemClockOffset);\n    }\n    return response;\n  };\n};\nconst getDateHeader = function () {\n  var _ref2, _headers$date;\n  let {\n    headers\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return (_ref2 = (_headers$date = headers === null || headers === void 0 ? void 0 : headers.date) !== null && _headers$date !== void 0 ? _headers$date : headers === null || headers === void 0 ? void 0 : headers.Date) !== null && _ref2 !== void 0 ? _ref2 : headers === null || headers === void 0 ? void 0 : headers['x-amz-date'];\n};\nexport { signingMiddlewareFactory };\n//# sourceMappingURL=middleware.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}