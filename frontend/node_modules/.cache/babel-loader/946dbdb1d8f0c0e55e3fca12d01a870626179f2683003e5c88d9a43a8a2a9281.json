{"ast":null,"code":"import { ConsoleLogger } from '@aws-amplify/core';\nimport { assertIdentityPoolIdConfig } from '@aws-amplify/core/internals/utils';\nimport { getAuthStorageKeys } from '../tokenProvider/TokenStore.mjs';\nimport { IdentityIdStorageKeys } from './types.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('DefaultIdentityIdStore');\nclass DefaultIdentityIdStore {\n  setAuthConfig(authConfigParam) {\n    assertIdentityPoolIdConfig(authConfigParam.Cognito);\n    this.authConfig = authConfigParam;\n    this._authKeys = createKeysForAuthStorage('Cognito', authConfigParam.Cognito.identityPoolId);\n  }\n  constructor(keyValueStorage) {\n    this._authKeys = {};\n    this._hasGuestIdentityId = false;\n    this.keyValueStorage = keyValueStorage;\n  }\n  async loadIdentityId() {\n    assertIdentityPoolIdConfig(this.authConfig?.Cognito);\n    try {\n      if (this._primaryIdentityId) {\n        return {\n          id: this._primaryIdentityId,\n          type: 'primary'\n        };\n      } else {\n        const storedIdentityId = await this.keyValueStorage.getItem(this._authKeys.identityId);\n        if (storedIdentityId) {\n          this._hasGuestIdentityId = true;\n          return {\n            id: storedIdentityId,\n            type: 'guest'\n          };\n        }\n        return null;\n      }\n    } catch (err) {\n      logger.log('Error getting stored IdentityId.', err);\n      return null;\n    }\n  }\n  async storeIdentityId(identity) {\n    assertIdentityPoolIdConfig(this.authConfig?.Cognito);\n    if (identity.type === 'guest') {\n      this.keyValueStorage.setItem(this._authKeys.identityId, identity.id);\n      // Clear in-memory storage of primary identityId\n      this._primaryIdentityId = undefined;\n      this._hasGuestIdentityId = true;\n    } else {\n      this._primaryIdentityId = identity.id;\n      // Clear locally stored guest id\n      if (this._hasGuestIdentityId) {\n        this.keyValueStorage.removeItem(this._authKeys.identityId);\n        this._hasGuestIdentityId = false;\n      }\n    }\n  }\n  async clearIdentityId() {\n    this._primaryIdentityId = undefined;\n    await this.keyValueStorage.removeItem(this._authKeys.identityId);\n  }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n  return getAuthStorageKeys(IdentityIdStorageKeys)(`com.amplify.${provider}`, identifier);\n};\nexport { DefaultIdentityIdStore };\n//# sourceMappingURL=IdentityIdStore.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}