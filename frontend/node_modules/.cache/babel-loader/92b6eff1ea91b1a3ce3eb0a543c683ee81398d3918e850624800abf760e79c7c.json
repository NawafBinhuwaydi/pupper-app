{"ast":null,"code":"import _objectSpread from \"/home/nawaf/aws-project/pupper-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createResendConfirmationCodeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resend the confirmation code while signing up\n *\n * @param input -  The ResendSignUpCodeInput object\n * @returns ResendSignUpCodeOutput\n * @throws service: {@link ResendConfirmationException } - Cognito service errors thrown when resending the code.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function resendSignUpCode(input) {\n  var _Amplify$getConfig$Au, _input$options;\n  const {\n    username\n  } = input;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolClientId,\n    userPoolId,\n    userPoolEndpoint\n  } = authConfig;\n  const clientMetadata = (_input$options = input.options) === null || _input$options === void 0 ? void 0 : _input$options.clientMetadata;\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const resendConfirmationCode = createResendConfirmationCodeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    CodeDeliveryDetails\n  } = await resendConfirmationCode({\n    region: getRegionFromUserPoolId(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ResendSignUpCode)\n  }, {\n    Username: username,\n    ClientMetadata: clientMetadata,\n    ClientId: authConfig.userPoolClientId,\n    UserContextData\n  });\n  const {\n    DeliveryMedium,\n    AttributeName,\n    Destination\n  } = _objectSpread({}, CodeDeliveryDetails);\n  return {\n    destination: Destination,\n    deliveryMedium: DeliveryMedium,\n    attributeName: AttributeName ? AttributeName : undefined\n  };\n}\nexport { resendSignUpCode };\n//# sourceMappingURL=resendSignUpCode.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}