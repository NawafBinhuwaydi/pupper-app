{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../utils/getAuthUserAgentValue.mjs';\nimport { registerPasskey } from '../utils/passkey/registerPasskey.mjs';\nimport '../utils/passkey/errors.mjs';\nimport { assertValidCredentialCreationOptions } from '../utils/passkey/types/shared.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../common/AuthErrorStrings.mjs';\nimport '../../errors/types/validation.mjs';\nimport '../../providers/cognito/types/errors.mjs';\nimport { createStartWebAuthnRegistrationClient } from '../../foundation/factories/serviceClients/cognitoIdentityProvider/createStartWebAuthnRegistrationClient.mjs';\nimport { createCompleteWebAuthnRegistrationClient } from '../../foundation/factories/serviceClients/cognitoIdentityProvider/createCompleteWebAuthnRegistrationClient.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Registers a new passkey for an authenticated user\n *\n * @returns Promise<void>\n * @throws - {@link PasskeyError}:\n * - Thrown when intermediate state is invalid\n * @throws - {@link AuthError}:\n * - Thrown when user is unauthenticated\n * @throws - {@link StartWebAuthnRegistrationException}\n * - Thrown due to a service error retrieving WebAuthn registration options\n * @throws - {@link CompleteWebAuthnRegistrationException}\n * - Thrown due to a service error when verifying WebAuthn registration result\n */\nasync function associateWebAuthnCredential() {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession();\n  assertAuthTokens(tokens);\n  const startWebAuthnRegistration = createStartWebAuthnRegistrationClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    CredentialCreationOptions: credentialCreationOptions\n  } = await startWebAuthnRegistration({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.StartWebAuthnRegistration)\n  }, {\n    AccessToken: tokens.accessToken.toString()\n  });\n  assertValidCredentialCreationOptions(credentialCreationOptions);\n  const cred = await registerPasskey(credentialCreationOptions);\n  const completeWebAuthnRegistration = createCompleteWebAuthnRegistrationClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await completeWebAuthnRegistration({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.CompleteWebAuthnRegistration)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    Credential: cred\n  });\n}\nexport { associateWebAuthnCredential };\n//# sourceMappingURL=associateWebAuthnCredential.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}