{"ast":null,"code":"import axios from'axios';// Use direct API URL for now to avoid proxy issues\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'https://bj9jbp1rgf.execute-api.us-east-1.amazonaws.com/prod';// Create axios instance with base configuration\nconst api=axios.create({baseURL:API_BASE_URL,timeout:30000,headers:{'Content-Type':'application/json'}});// Request interceptor for error handling\napi.interceptors.request.use(config=>config,error=>Promise.reject(error));// Response interceptor for error handling\napi.interceptors.response.use(response=>response,error=>{// Log errors in development only\nif(process.env.NODE_ENV==='development'){var _error$response;console.error('API Error:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);}return Promise.reject(error);});// Dogs API\nexport const dogsApi={// Get all dogs with optional filters\ngetDogs:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const params=new URLSearchParams();Object.entries(filters).forEach(_ref=>{let[key,value]=_ref;if(value!==undefined&&value!==null&&value!==''){params.append(key,value);}});const queryString=params.toString();const url=queryString?\"/dogs?\".concat(queryString):'/dogs';const response=await api.get(url);return response.data;},// Get single dog by ID\ngetDog:async dogId=>{const response=await api.get(\"/dogs/\".concat(dogId));return response.data;},// Create a new dog\ncreateDog:async dogData=>{const response=await api.post('/dogs',dogData);return response.data;},// Update a dog\nupdateDog:async(dogId,updates)=>{const response=await api.put(\"/dogs/\".concat(dogId),updates);return response.data;},// Delete a dog\ndeleteDog:async dogId=>{const response=await api.delete(\"/dogs/\".concat(dogId));return response.data;},// Vote on dog\nvoteDog:async(dogId,voteData)=>{const response=await api.post(\"/dogs/\".concat(dogId,\"/vote\"),voteData);return response.data;}};// Images API\nexport const imagesApi={// Upload an image\nuploadImage:async imageData=>{const response=await api.post('/images',imageData);return response.data;},// Get image metadata\ngetImage:async imageId=>{const response=await api.get(\"/images/\".concat(imageId));return response.data;}};// Utility functions\nexport const apiUtils={// Handle API errors\nhandleError:error=>{if(error.response){var _error$response$data,_error$response$data2;// Server responded with error status\nconst message=((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.message)||\"Server error (\".concat(error.response.status,\")\");return{message,status:error.response.status,data:error.response.data};}else if(error.request){// Request was made but no response received\nreturn{message:'Unable to connect to server. Please try again.',status:0,data:null};}else{// Something else happened\nreturn{message:error.message||'An unexpected error occurred',status:0,data:null};}},// Format image URL with fallback\ngetImageUrl:function(dog){let size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'400x400';if(dog.dog_photo_400x400_url&&size==='400x400'){return dog.dog_photo_400x400_url;}if(dog.dog_photo_50x50_url&&size==='50x50'){return dog.dog_photo_50x50_url;}if(dog.dog_photo_url){return dog.dog_photo_url;}return'https://via.placeholder.com/400x400/e5e7eb/9ca3af?text=Dog+Photo';},// Format dog age\nformatAge:ageYears=>{if(!ageYears)return'Unknown age';const years=Math.floor(ageYears);const months=Math.round((ageYears-years)*12);if(years===0){return\"\".concat(months,\" month\").concat(months!==1?'s':'',\" old\");}else if(months===0){return\"\".concat(years,\" year\").concat(years!==1?'s':'',\" old\");}else{return\"\".concat(years,\" year\").concat(years!==1?'s':'',\", \").concat(months,\" month\").concat(months!==1?'s':'',\" old\");}},// Format weight\nformatWeight:weight=>{if(!weight)return'Unknown weight';return\"\".concat(weight,\" lbs\");},// Get status badge color\ngetStatusColor:status=>{switch(status===null||status===void 0?void 0:status.toLowerCase()){case'available':return'bg-green-100 text-green-800';case'pending':return'bg-yellow-100 text-yellow-800';case'adopted':return'bg-gray-100 text-gray-800';default:return'bg-green-100 text-green-800';}}};export default api;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}