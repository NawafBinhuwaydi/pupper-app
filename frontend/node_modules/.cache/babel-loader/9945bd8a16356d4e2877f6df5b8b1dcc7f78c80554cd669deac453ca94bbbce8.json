{"ast":null,"code":"import _objectSpread from \"/home/nawaf/aws-project/pupper-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport '../../../types/errors.mjs';\nimport '../../../errors/errorHelpers.mjs';\nimport { getClientInfo } from '../../../utils/getClientInfo/getClientInfo.mjs';\nimport '../../../utils/retry/retry.mjs';\nimport '../../../parseAWSExports.mjs';\nimport { amplifyUuid } from '../../../utils/amplifyUuid/index.mjs';\nimport '../../../singleton/Auth/utils/errorHelpers.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport '../../../Platform/index.mjs';\nimport '../../../Platform/types.mjs';\nimport '../../../BackgroundProcessManager/types.mjs';\nimport '../../../Reachability/Reachability.mjs';\nimport '../../../Hub/index.mjs';\nimport '../../../utils/sessionListener/index.mjs';\nimport '../../../awsClients/pinpoint/errorHelpers.mjs';\nimport { updateEndpoint as updateEndpoint$1 } from '../../../awsClients/pinpoint/updateEndpoint.mjs';\nimport { cacheEndpointId } from '../utils/cacheEndpointId.mjs';\nimport { createEndpointId, clearCreatedEndpointId } from '../utils/createEndpointId.mjs';\nimport { getEndpointId } from '../utils/getEndpointId.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @internal\n */\nconst updateEndpoint = async _ref => {\n  let {\n    address,\n    appId,\n    category,\n    channelType,\n    credentials,\n    identityId,\n    optOut,\n    region,\n    userAttributes,\n    userId,\n    userProfile,\n    userAgentValue\n  } = _ref;\n  const endpointId = await getEndpointId(appId, category);\n  // only generate a new endpoint id if one was not found in cache\n  const createdEndpointId = !endpointId ? createEndpointId(appId, category) : undefined;\n  const {\n    customProperties,\n    demographic,\n    email,\n    location,\n    metrics,\n    name,\n    plan\n  } = userProfile !== null && userProfile !== void 0 ? userProfile : {};\n  // only automatically populate the endpoint with client info and identity id upon endpoint creation to\n  // avoid overwriting the endpoint with these values every time the endpoint is updated\n  const demographicsFromClientInfo = {};\n  const resolvedUserId = createdEndpointId ? userId !== null && userId !== void 0 ? userId : identityId : userId;\n  if (createdEndpointId) {\n    const clientInfo = getClientInfo();\n    demographicsFromClientInfo.appVersion = clientInfo.appVersion;\n    demographicsFromClientInfo.make = clientInfo.make;\n    demographicsFromClientInfo.model = clientInfo.model;\n    demographicsFromClientInfo.modelVersion = clientInfo.version;\n    demographicsFromClientInfo.platform = clientInfo.platform;\n  }\n  const mergedDemographic = _objectSpread(_objectSpread({}, demographicsFromClientInfo), demographic);\n  const attributes = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, email && {\n    email: [email]\n  }), name && {\n    name: [name]\n  }), plan && {\n    plan: [plan]\n  }), customProperties);\n  const shouldAddDemographics = createdEndpointId || demographic;\n  const shouldAddAttributes = email || customProperties || name || plan;\n  const shouldAddUser = resolvedUserId || userAttributes;\n  const input = {\n    ApplicationId: appId,\n    EndpointId: endpointId !== null && endpointId !== void 0 ? endpointId : createdEndpointId,\n    EndpointRequest: _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n      RequestId: amplifyUuid(),\n      EffectiveDate: new Date().toISOString(),\n      ChannelType: channelType,\n      Address: address\n    }, shouldAddAttributes && {\n      Attributes: attributes\n    }), shouldAddDemographics && {\n      Demographic: {\n        AppVersion: mergedDemographic.appVersion,\n        Locale: mergedDemographic.locale,\n        Make: mergedDemographic.make,\n        Model: mergedDemographic.model,\n        ModelVersion: mergedDemographic.modelVersion,\n        Platform: mergedDemographic.platform,\n        PlatformVersion: mergedDemographic.platformVersion,\n        Timezone: mergedDemographic.timezone\n      }\n    }), location && {\n      Location: {\n        City: location.city,\n        Country: location.country,\n        Latitude: location.latitude,\n        Longitude: location.longitude,\n        PostalCode: location.postalCode,\n        Region: location.region\n      }\n    }), {}, {\n      Metrics: metrics,\n      OptOut: optOut\n    }, shouldAddUser && {\n      User: {\n        UserId: resolvedUserId,\n        UserAttributes: userAttributes\n      }\n    })\n  };\n  try {\n    await updateEndpoint$1({\n      credentials,\n      region,\n      userAgentValue\n    }, input);\n    // if we had to create an endpoint id, we need to now cache it\n    if (createdEndpointId) {\n      await cacheEndpointId(appId, category, createdEndpointId);\n    }\n  } finally {\n    // at this point, we completely reset the behavior so even if the update was unsuccessful\n    // we can just start over with a newly created endpoint id\n    if (createdEndpointId) {\n      clearCreatedEndpointId(appId, category);\n    }\n  }\n};\nexport { updateEndpoint };\n//# sourceMappingURL=updateEndpoint.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}