{"ast":null,"code":"import { ConsoleLogger } from '../../Logger/ConsoleLogger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('Auth');\nclass AuthClass {\n  /**\n   * Configure Auth category\n   *\n   * @internal\n   *\n   * @param authResourcesConfig - Resources configurations required by Auth providers.\n   * @param authOptions - Client options used by library\n   *\n   * @returns void\n   */\n  configure(authResourcesConfig, authOptions) {\n    var _authResourcesConfig$, _authResourcesConfig$2;\n    this.authConfig = authResourcesConfig;\n    this.authOptions = authOptions;\n    if (authResourcesConfig && (_authResourcesConfig$ = authResourcesConfig.Cognito) !== null && _authResourcesConfig$ !== void 0 && _authResourcesConfig$.userPoolEndpoint) {\n      logger.warn(getCustomEndpointWarningMessage('Amazon Cognito User Pool'));\n    }\n    if (authResourcesConfig && (_authResourcesConfig$2 = authResourcesConfig.Cognito) !== null && _authResourcesConfig$2 !== void 0 && _authResourcesConfig$2.identityPoolEndpoint) {\n      logger.warn(getCustomEndpointWarningMessage('Amazon Cognito Identity Pool'));\n    }\n  }\n  /**\n   * Fetch the auth tokens, and the temporary AWS credentials and identity if they are configured. By default it\n   * does not refresh the auth tokens or credentials if they are loaded in storage already. You can force a refresh\n   * with `{ forceRefresh: true }` input.\n   *\n   * @param options - Options configuring the fetch behavior.\n   *\n   * @returns Promise of current auth session {@link AuthSession}.\n   */\n  async fetchAuthSession() {\n    var _credentialsAndIdenti, _credentialsAndIdenti2;\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let credentialsAndIdentityId;\n    let userSub;\n    // Get tokens will throw if session cannot be refreshed (network or service error) or return null if not available\n    const tokens = await this.getTokens(options);\n    if (tokens) {\n      var _tokens$accessToken, _this$authOptions;\n      userSub = (_tokens$accessToken = tokens.accessToken) === null || _tokens$accessToken === void 0 || (_tokens$accessToken = _tokens$accessToken.payload) === null || _tokens$accessToken === void 0 ? void 0 : _tokens$accessToken.sub;\n      // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n      credentialsAndIdentityId = await ((_this$authOptions = this.authOptions) === null || _this$authOptions === void 0 || (_this$authOptions = _this$authOptions.credentialsProvider) === null || _this$authOptions === void 0 ? void 0 : _this$authOptions.getCredentialsAndIdentityId({\n        authConfig: this.authConfig,\n        tokens,\n        authenticated: true,\n        forceRefresh: options.forceRefresh\n      }));\n    } else {\n      var _this$authOptions2;\n      // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n      credentialsAndIdentityId = await ((_this$authOptions2 = this.authOptions) === null || _this$authOptions2 === void 0 || (_this$authOptions2 = _this$authOptions2.credentialsProvider) === null || _this$authOptions2 === void 0 ? void 0 : _this$authOptions2.getCredentialsAndIdentityId({\n        authConfig: this.authConfig,\n        authenticated: false,\n        forceRefresh: options.forceRefresh\n      }));\n    }\n    return {\n      tokens,\n      credentials: (_credentialsAndIdenti = credentialsAndIdentityId) === null || _credentialsAndIdenti === void 0 ? void 0 : _credentialsAndIdenti.credentials,\n      identityId: (_credentialsAndIdenti2 = credentialsAndIdentityId) === null || _credentialsAndIdenti2 === void 0 ? void 0 : _credentialsAndIdenti2.identityId,\n      userSub\n    };\n  }\n  async clearCredentials() {\n    var _this$authOptions3;\n    await ((_this$authOptions3 = this.authOptions) === null || _this$authOptions3 === void 0 || (_this$authOptions3 = _this$authOptions3.credentialsProvider) === null || _this$authOptions3 === void 0 ? void 0 : _this$authOptions3.clearCredentialsAndIdentityId());\n  }\n  async getTokens(options) {\n    var _await$this$authOptio, _this$authOptions4;\n    return (_await$this$authOptio = await ((_this$authOptions4 = this.authOptions) === null || _this$authOptions4 === void 0 || (_this$authOptions4 = _this$authOptions4.tokenProvider) === null || _this$authOptions4 === void 0 ? void 0 : _this$authOptions4.getTokens(options))) !== null && _await$this$authOptio !== void 0 ? _await$this$authOptio : undefined;\n  }\n}\nconst getCustomEndpointWarningMessage = target => \"You are using a custom Amazon \".concat(target, \" endpoint, ensure the endpoint is correct.\");\nexport { AuthClass };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}