{"ast":null,"code":"import { invalidOriginException, invalidRedirectException, invalidPreferredRedirectUrlException } from '../../../../errors/constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/** @internal */\nfunction getRedirectUrl(redirects, preferredRedirectUrl) {\n  if (preferredRedirectUrl) {\n    const redirectUrl = redirects === null || redirects === void 0 ? void 0 : redirects.find(redirect => redirect === preferredRedirectUrl);\n    if (!redirectUrl) {\n      throw invalidPreferredRedirectUrlException;\n    }\n    return redirectUrl;\n  } else {\n    var _redirects$find, _redirects$find2;\n    const redirectUrlFromTheSameOrigin = (_redirects$find = redirects === null || redirects === void 0 ? void 0 : redirects.find(isSameOriginAndPathName)) !== null && _redirects$find !== void 0 ? _redirects$find : redirects === null || redirects === void 0 ? void 0 : redirects.find(isTheSameDomain);\n    const redirectUrlFromDifferentOrigin = (_redirects$find2 = redirects === null || redirects === void 0 ? void 0 : redirects.find(isHttps)) !== null && _redirects$find2 !== void 0 ? _redirects$find2 : redirects === null || redirects === void 0 ? void 0 : redirects.find(isHttp);\n    if (redirectUrlFromTheSameOrigin) {\n      return redirectUrlFromTheSameOrigin;\n    } else if (redirectUrlFromDifferentOrigin) {\n      throw invalidOriginException;\n    }\n    throw invalidRedirectException;\n  }\n}\n// origin + pathname => https://example.com/app\nconst isSameOriginAndPathName = redirect => redirect.startsWith(String(window.location.origin + (window.location.pathname || '/')));\n// domain => outlook.live.com, github.com\nconst isTheSameDomain = redirect => redirect.includes(String(window.location.hostname));\nconst isHttp = redirect => redirect.startsWith('http://');\nconst isHttps = redirect => redirect.startsWith('https://');\nexport { getRedirectUrl };\n//# sourceMappingURL=getRedirectUrl.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}