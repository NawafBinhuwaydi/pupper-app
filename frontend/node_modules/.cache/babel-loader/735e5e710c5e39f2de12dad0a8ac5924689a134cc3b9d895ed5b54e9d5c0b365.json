{"ast":null,"code":"import { deDupeAsyncFunction, assertTokenProviderConfig, decodeJWT } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokensWithRefreshToken } from './types.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getUserContextData } from './userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst refreshAuthTokensFunction = async _ref => {\n  var _tokens$deviceMetadat, _AuthenticationResult;\n  let {\n    tokens,\n    authConfig,\n    username\n  } = _ref;\n  assertTokenProviderConfig(authConfig === null || authConfig === void 0 ? void 0 : authConfig.Cognito);\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = authConfig.Cognito;\n  const region = getRegionFromUserPoolId(userPoolId);\n  assertAuthTokensWithRefreshToken(tokens);\n  const refreshTokenString = tokens.refreshToken;\n  const AuthParameters = {\n    REFRESH_TOKEN: refreshTokenString\n  };\n  if ((_tokens$deviceMetadat = tokens.deviceMetadata) !== null && _tokens$deviceMetadat !== void 0 && _tokens$deviceMetadat.deviceKey) {\n    AuthParameters.DEVICE_KEY = tokens.deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    AuthenticationResult\n  } = await initiateAuth({\n    region\n  }, {\n    ClientId: userPoolClientId,\n    AuthFlow: 'REFRESH_TOKEN_AUTH',\n    AuthParameters,\n    UserContextData\n  });\n  const accessToken = decodeJWT((_AuthenticationResult = AuthenticationResult === null || AuthenticationResult === void 0 ? void 0 : AuthenticationResult.AccessToken) !== null && _AuthenticationResult !== void 0 ? _AuthenticationResult : '');\n  const idToken = AuthenticationResult !== null && AuthenticationResult !== void 0 && AuthenticationResult.IdToken ? decodeJWT(AuthenticationResult.IdToken) : undefined;\n  const {\n    iat\n  } = accessToken.payload;\n  // This should never happen. If it does, it's a bug from the service.\n  if (!iat) {\n    throw new AuthError({\n      name: 'iatNotFoundException',\n      message: 'iat not found in access token'\n    });\n  }\n  const clockDrift = iat * 1000 - new Date().getTime();\n  return {\n    accessToken,\n    idToken,\n    clockDrift,\n    refreshToken: refreshTokenString,\n    username\n  };\n};\nconst refreshAuthTokens = deDupeAsyncFunction(refreshAuthTokensFunction);\nconst refreshAuthTokensWithoutDedupe = refreshAuthTokensFunction;\nexport { refreshAuthTokens, refreshAuthTokensWithoutDedupe };\n//# sourceMappingURL=refreshAuthTokens.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}