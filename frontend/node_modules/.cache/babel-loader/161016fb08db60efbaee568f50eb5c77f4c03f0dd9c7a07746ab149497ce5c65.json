{"ast":null,"code":"import '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertDeviceMetadata } from './types.mjs';\nimport { getAuthenticationHelper } from './srp/getAuthenticationHelper.mjs';\nimport './srp/constants.mjs';\nimport { getNowString } from './srp/getNowString.mjs';\nimport { getSignatureString } from './srp/getSignatureString.mjs';\nimport BigInteger from './srp/BigInteger/BigInteger.mjs';\nimport { getUserContextData } from './userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function handleDeviceSRPAuth(_ref) {\n  let {\n    username,\n    config,\n    clientMetadata,\n    session,\n    tokenOrchestrator\n  } = _ref;\n  const {\n    userPoolId,\n    userPoolEndpoint\n  } = config;\n  const clientId = config.userPoolClientId;\n  const deviceMetadata = await (tokenOrchestrator === null || tokenOrchestrator === void 0 ? void 0 : tokenOrchestrator.getDeviceMetadata(username));\n  assertDeviceMetadata(deviceMetadata);\n  const authenticationHelper = await getAuthenticationHelper(deviceMetadata.deviceGroupKey);\n  const challengeResponses = {\n    USERNAME: username,\n    SRP_A: authenticationHelper.A.toString(16),\n    DEVICE_KEY: deviceMetadata.deviceKey\n  };\n  const jsonReqResponseChallenge = {\n    ChallengeName: 'DEVICE_SRP_AUTH',\n    ClientId: clientId,\n    ChallengeResponses: challengeResponses,\n    ClientMetadata: clientMetadata,\n    Session: session\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    ChallengeParameters: respondedChallengeParameters,\n    Session\n  } = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId)\n  }, jsonReqResponseChallenge);\n  return handleDevicePasswordVerifier(username, respondedChallengeParameters, clientMetadata, Session, authenticationHelper, config, tokenOrchestrator);\n}\nasync function handleDevicePasswordVerifier(username, challengeParameters, clientMetadata, session, authenticationHelper, _ref2, tokenOrchestrator) {\n  var _challengeParameters$;\n  let {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = _ref2;\n  const deviceMetadata = await (tokenOrchestrator === null || tokenOrchestrator === void 0 ? void 0 : tokenOrchestrator.getDeviceMetadata(username));\n  assertDeviceMetadata(deviceMetadata);\n  const serverBValue = new BigInteger(challengeParameters === null || challengeParameters === void 0 ? void 0 : challengeParameters.SRP_B, 16);\n  const salt = new BigInteger(challengeParameters === null || challengeParameters === void 0 ? void 0 : challengeParameters.SALT, 16);\n  const {\n    deviceKey\n  } = deviceMetadata;\n  const {\n    deviceGroupKey\n  } = deviceMetadata;\n  const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n    username: deviceMetadata.deviceKey,\n    password: deviceMetadata.randomPassword,\n    serverBValue,\n    salt\n  });\n  const dateNow = getNowString();\n  const challengeResponses = {\n    USERNAME: (_challengeParameters$ = challengeParameters === null || challengeParameters === void 0 ? void 0 : challengeParameters.USERNAME) !== null && _challengeParameters$ !== void 0 ? _challengeParameters$ : username,\n    PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters === null || challengeParameters === void 0 ? void 0 : challengeParameters.SECRET_BLOCK,\n    TIMESTAMP: dateNow,\n    PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n      username: deviceKey,\n      userPoolName: deviceGroupKey,\n      challengeParameters,\n      dateNow,\n      hkdf\n    }),\n    DEVICE_KEY: deviceKey\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReqResponseChallenge = {\n    ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n    ClientId: userPoolClientId,\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    UserContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  return respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId)\n  }, jsonReqResponseChallenge);\n}\nexport { handleDeviceSRPAuth };\n//# sourceMappingURL=handleDeviceSRPAuth.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}