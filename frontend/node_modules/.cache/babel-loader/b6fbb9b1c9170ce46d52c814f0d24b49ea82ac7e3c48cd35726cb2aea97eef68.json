{"ast":null,"code":"import { assertTokenProviderConfig, assertOAuthConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getAuthUserAgentValue } from '../../../../utils/getAuthUserAgentValue.mjs';\nimport { oAuthStore } from './oAuthStore.mjs';\nimport { completeOAuthFlow } from './completeOAuthFlow.mjs';\nimport { getRedirectUrl } from './getRedirectUrl.mjs';\nimport { handleFailure } from './handleFailure.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst attemptCompleteOAuthFlow = async authConfig => {\n  try {\n    assertTokenProviderConfig(authConfig);\n    assertOAuthConfig(authConfig);\n    oAuthStore.setAuthConfig(authConfig);\n  } catch (_) {\n    // no-op\n    // This should not happen as Amplify singleton checks the oauth config key\n    // unless the oauth config object doesn't contain required properties\n    return;\n  }\n  // No inflight OAuth\n  if (!(await oAuthStore.loadOAuthInFlight())) {\n    return;\n  }\n  try {\n    const currentUrl = window.location.href;\n    const {\n      loginWith,\n      userPoolClientId\n    } = authConfig;\n    const {\n      domain,\n      redirectSignIn,\n      responseType\n    } = loginWith.oauth;\n    const redirectUri = getRedirectUrl(redirectSignIn);\n    await completeOAuthFlow({\n      currentUrl,\n      clientId: userPoolClientId,\n      domain,\n      redirectUri,\n      responseType,\n      userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect)\n    });\n  } catch (err) {\n    await handleFailure(err);\n  }\n};\nexport { attemptCompleteOAuthFlow };\n//# sourceMappingURL=attemptCompleteOAuthFlow.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}