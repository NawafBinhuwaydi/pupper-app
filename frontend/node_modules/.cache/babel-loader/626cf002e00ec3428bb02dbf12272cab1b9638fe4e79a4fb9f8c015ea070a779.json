{"ast":null,"code":"import { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { getAuthStorageKeys } from '../tokenProvider/TokenStore.mjs';\nimport { OAuthStorageKeys } from './types.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst V5_HOSTED_UI_KEY = 'amplify-signin-with-hostedUI';\nconst name = 'CognitoIdentityServiceProvider';\nclass DefaultOAuthStore {\n  constructor(keyValueStorage) {\n    this.keyValueStorage = keyValueStorage;\n  }\n  async clearOAuthInflightData() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    await Promise.all([this.keyValueStorage.removeItem(authKeys.inflightOAuth), this.keyValueStorage.removeItem(authKeys.oauthPKCE), this.keyValueStorage.removeItem(authKeys.oauthState)]);\n  }\n  async clearOAuthData() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    await this.clearOAuthInflightData();\n    await this.keyValueStorage.removeItem(V5_HOSTED_UI_KEY); // remove in case a customer migrated an App from v5 to v6\n    return this.keyValueStorage.removeItem(authKeys.oauthSignIn);\n  }\n  loadOAuthState() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return this.keyValueStorage.getItem(authKeys.oauthState);\n  }\n  storeOAuthState(state) {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return this.keyValueStorage.setItem(authKeys.oauthState, state);\n  }\n  loadPKCE() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return this.keyValueStorage.getItem(authKeys.oauthPKCE);\n  }\n  storePKCE(pkce) {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return this.keyValueStorage.setItem(authKeys.oauthPKCE, pkce);\n  }\n  setAuthConfig(authConfigParam) {\n    this.cognitoConfig = authConfigParam;\n  }\n  async loadOAuthInFlight() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return (await this.keyValueStorage.getItem(authKeys.inflightOAuth)) === 'true';\n  }\n  async storeOAuthInFlight(inflight) {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    await this.keyValueStorage.setItem(authKeys.inflightOAuth, \"\".concat(inflight));\n  }\n  async loadOAuthSignIn() {\n    var _await$this$keyValueS, _await$this$keyValueS2;\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    const isLegacyHostedUISignIn = await this.keyValueStorage.getItem(V5_HOSTED_UI_KEY);\n    const [isOAuthSignIn, preferPrivateSession] = (_await$this$keyValueS = (_await$this$keyValueS2 = await this.keyValueStorage.getItem(authKeys.oauthSignIn)) === null || _await$this$keyValueS2 === void 0 ? void 0 : _await$this$keyValueS2.split(',')) !== null && _await$this$keyValueS !== void 0 ? _await$this$keyValueS : [];\n    return {\n      isOAuthSignIn: isOAuthSignIn === 'true' || isLegacyHostedUISignIn === 'true',\n      preferPrivateSession: preferPrivateSession === 'true'\n    };\n  }\n  async storeOAuthSignIn(oauthSignIn) {\n    let preferPrivateSession = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    await this.keyValueStorage.setItem(authKeys.oauthSignIn, \"\".concat(oauthSignIn, \",\").concat(preferPrivateSession));\n  }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n  return getAuthStorageKeys(OAuthStorageKeys)(provider, identifier);\n};\nexport { DefaultOAuthStore };\n//# sourceMappingURL=signInWithRedirectStore.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}