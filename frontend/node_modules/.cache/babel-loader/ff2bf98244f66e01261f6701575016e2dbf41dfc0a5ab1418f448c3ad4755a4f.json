{"ast":null,"code":"import _objectSpread from \"/home/nawaf/aws-project/pupper-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Amplify, CookieStorage, defaultStorage } from '@aws-amplify/core';\nimport { parseAmplifyConfig } from '@aws-amplify/core/internals/utils';\nimport { CognitoAWSCredentialsAndIdentityIdProvider, DefaultIdentityIdStore, cognitoCredentialsProvider, cognitoUserPoolsTokenProvider } from '@aws-amplify/auth/cognito';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst DefaultAmplify = {\n  /**\n   * Configures Amplify with the {@link resourceConfig} and {@link libraryOptions}.\n   *\n   * @param resourceConfig The {@link ResourcesConfig} object that is typically imported from the\n   * `amplifyconfiguration.json` file. It can also be an object literal created inline when calling `Amplify.configure`.\n   * @param libraryOptions The {@link LibraryOptions} additional options for the library.\n   *\n   * @example\n   * import config from './amplifyconfiguration.json';\n   *\n   * Amplify.configure(config);\n   */\n  configure(resourceConfig, libraryOptions) {\n    const resolvedResourceConfig = parseAmplifyConfig(resourceConfig);\n    const cookieBasedKeyValueStorage = new CookieStorage({\n      sameSite: 'lax'\n    });\n    const resolvedKeyValueStorage = libraryOptions !== null && libraryOptions !== void 0 && libraryOptions.ssr ? cookieBasedKeyValueStorage : defaultStorage;\n    const resolvedCredentialsProvider = libraryOptions !== null && libraryOptions !== void 0 && libraryOptions.ssr ? new CognitoAWSCredentialsAndIdentityIdProvider(new DefaultIdentityIdStore(cookieBasedKeyValueStorage)) : cognitoCredentialsProvider;\n    // If no Auth config is provided, no special handling will be required, configure as is.\n    // Otherwise, we can assume an Auth config is provided from here on.\n    if (!resolvedResourceConfig.Auth) {\n      Amplify.configure(resolvedResourceConfig, libraryOptions);\n      return;\n    }\n    // If Auth options are provided, always just configure as is.\n    // Otherwise, we can assume no Auth libraryOptions were provided from here on.\n    if (libraryOptions !== null && libraryOptions !== void 0 && libraryOptions.Auth) {\n      Amplify.configure(resolvedResourceConfig, libraryOptions);\n      return;\n    }\n    // If no Auth libraryOptions were previously configured, then always add default providers.\n    if (!Amplify.libraryOptions.Auth) {\n      cognitoUserPoolsTokenProvider.setAuthConfig(resolvedResourceConfig.Auth);\n      cognitoUserPoolsTokenProvider.setKeyValueStorage(\n      // TODO: allow configure with a public interface\n      resolvedKeyValueStorage);\n      Amplify.configure(resolvedResourceConfig, _objectSpread(_objectSpread({}, libraryOptions), {}, {\n        Auth: {\n          tokenProvider: cognitoUserPoolsTokenProvider,\n          credentialsProvider: resolvedCredentialsProvider\n        }\n      }));\n      return;\n    }\n    // At this point, Auth libraryOptions would have been previously configured and no overriding\n    // Auth options were given, so we should preserve the currently configured Auth libraryOptions.\n    if (libraryOptions) {\n      const authLibraryOptions = Amplify.libraryOptions.Auth;\n      // If ssr is provided through libraryOptions, we should respect the intentional reconfiguration.\n      if (libraryOptions.ssr !== undefined) {\n        cognitoUserPoolsTokenProvider.setKeyValueStorage(\n        // TODO: allow configure with a public interface\n        resolvedKeyValueStorage);\n        authLibraryOptions.credentialsProvider = resolvedCredentialsProvider;\n      }\n      Amplify.configure(resolvedResourceConfig, _objectSpread({\n        Auth: authLibraryOptions\n      }, libraryOptions));\n      return;\n    }\n    // Finally, if there were no libraryOptions given at all, we should simply not touch the currently\n    // configured libraryOptions.\n    Amplify.configure(resolvedResourceConfig);\n  },\n  /**\n   * Returns the {@link ResourcesConfig} object passed in as the `resourceConfig` parameter when calling\n   * `Amplify.configure`.\n   *\n   * @returns An {@link ResourcesConfig} object.\n   */\n  getConfig() {\n    return Amplify.getConfig();\n  }\n};\nexport { DefaultAmplify };\n//# sourceMappingURL=initSingleton.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}