{"ast":null,"code":"import _objectSpread from \"/home/nawaf/aws-project/pupper-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { decodeJWT, assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { AuthTokenStorageKeys } from './types.mjs';\nimport { assert, TokenProviderErrorCode } from './errorHelpers.mjs';\nimport { AUTH_KEY_PREFIX } from './constants.mjs';\nclass DefaultTokenStore {\n  getKeyValueStorage() {\n    if (!this.keyValueStorage) {\n      throw new AuthError({\n        name: 'KeyValueStorageNotFoundException',\n        message: 'KeyValueStorage was not found in TokenStore'\n      });\n    }\n    return this.keyValueStorage;\n  }\n  setKeyValueStorage(keyValueStorage) {\n    this.keyValueStorage = keyValueStorage;\n  }\n  setAuthConfig(authConfig) {\n    this.authConfig = authConfig;\n  }\n  async loadTokens() {\n    // TODO(v6): migration logic should be here\n    // Reading V5 tokens old format\n    try {\n      var _await$this$getKeyVal, _await$this$getKeyVal2, _await$this$getDevice;\n      const authKeys = await this.getAuthKeys();\n      const accessTokenString = await this.getKeyValueStorage().getItem(authKeys.accessToken);\n      if (!accessTokenString) {\n        throw new AuthError({\n          name: 'NoSessionFoundException',\n          message: 'Auth session was not found. Make sure to call signIn.'\n        });\n      }\n      const accessToken = decodeJWT(accessTokenString);\n      const itString = await this.getKeyValueStorage().getItem(authKeys.idToken);\n      const idToken = itString ? decodeJWT(itString) : undefined;\n      const refreshToken = (_await$this$getKeyVal = await this.getKeyValueStorage().getItem(authKeys.refreshToken)) !== null && _await$this$getKeyVal !== void 0 ? _await$this$getKeyVal : undefined;\n      const clockDriftString = (_await$this$getKeyVal2 = await this.getKeyValueStorage().getItem(authKeys.clockDrift)) !== null && _await$this$getKeyVal2 !== void 0 ? _await$this$getKeyVal2 : '0';\n      const clockDrift = Number.parseInt(clockDriftString);\n      const signInDetails = await this.getKeyValueStorage().getItem(authKeys.signInDetails);\n      const tokens = {\n        accessToken,\n        idToken,\n        refreshToken,\n        deviceMetadata: (_await$this$getDevice = await this.getDeviceMetadata()) !== null && _await$this$getDevice !== void 0 ? _await$this$getDevice : undefined,\n        clockDrift,\n        username: await this.getLastAuthUser()\n      };\n      if (signInDetails) {\n        tokens.signInDetails = JSON.parse(signInDetails);\n      }\n      return tokens;\n    } catch (err) {\n      return null;\n    }\n  }\n  async storeTokens(tokens) {\n    assert(tokens !== undefined, TokenProviderErrorCode.InvalidAuthTokens);\n    const lastAuthUser = tokens.username;\n    await this.getKeyValueStorage().setItem(this.getLastAuthUserKey(), lastAuthUser);\n    const authKeys = await this.getAuthKeys();\n    await this.getKeyValueStorage().setItem(authKeys.accessToken, tokens.accessToken.toString());\n    if (tokens.idToken) {\n      await this.getKeyValueStorage().setItem(authKeys.idToken, tokens.idToken.toString());\n    } else {\n      await this.getKeyValueStorage().removeItem(authKeys.idToken);\n    }\n    if (tokens.refreshToken) {\n      await this.getKeyValueStorage().setItem(authKeys.refreshToken, tokens.refreshToken);\n    } else {\n      await this.getKeyValueStorage().removeItem(authKeys.refreshToken);\n    }\n    if (tokens.deviceMetadata) {\n      if (tokens.deviceMetadata.deviceKey) {\n        await this.getKeyValueStorage().setItem(authKeys.deviceKey, tokens.deviceMetadata.deviceKey);\n      }\n      if (tokens.deviceMetadata.deviceGroupKey) {\n        await this.getKeyValueStorage().setItem(authKeys.deviceGroupKey, tokens.deviceMetadata.deviceGroupKey);\n      }\n      await this.getKeyValueStorage().setItem(authKeys.randomPasswordKey, tokens.deviceMetadata.randomPassword);\n    }\n    if (tokens.signInDetails) {\n      await this.getKeyValueStorage().setItem(authKeys.signInDetails, JSON.stringify(tokens.signInDetails));\n    } else {\n      await this.getKeyValueStorage().removeItem(authKeys.signInDetails);\n    }\n    await this.getKeyValueStorage().setItem(authKeys.clockDrift, \"\".concat(tokens.clockDrift));\n  }\n  async clearTokens() {\n    const authKeys = await this.getAuthKeys();\n    // Not calling clear because it can remove data that is not managed by AuthTokenStore\n    await Promise.all([this.getKeyValueStorage().removeItem(authKeys.accessToken), this.getKeyValueStorage().removeItem(authKeys.idToken), this.getKeyValueStorage().removeItem(authKeys.clockDrift), this.getKeyValueStorage().removeItem(authKeys.refreshToken), this.getKeyValueStorage().removeItem(authKeys.signInDetails), this.getKeyValueStorage().removeItem(this.getLastAuthUserKey()), this.getKeyValueStorage().removeItem(authKeys.oauthMetadata)]);\n  }\n  async getDeviceMetadata(username) {\n    const authKeys = await this.getAuthKeys(username);\n    const deviceKey = await this.getKeyValueStorage().getItem(authKeys.deviceKey);\n    const deviceGroupKey = await this.getKeyValueStorage().getItem(authKeys.deviceGroupKey);\n    const randomPassword = await this.getKeyValueStorage().getItem(authKeys.randomPasswordKey);\n    return randomPassword && deviceGroupKey && deviceKey ? {\n      deviceKey,\n      deviceGroupKey,\n      randomPassword\n    } : null;\n  }\n  async clearDeviceMetadata(username) {\n    const authKeys = await this.getAuthKeys(username);\n    await Promise.all([this.getKeyValueStorage().removeItem(authKeys.deviceKey), this.getKeyValueStorage().removeItem(authKeys.deviceGroupKey), this.getKeyValueStorage().removeItem(authKeys.randomPasswordKey)]);\n  }\n  async getAuthKeys(username) {\n    var _this$authConfig;\n    assertTokenProviderConfig((_this$authConfig = this.authConfig) === null || _this$authConfig === void 0 ? void 0 : _this$authConfig.Cognito);\n    const lastAuthUser = username !== null && username !== void 0 ? username : await this.getLastAuthUser();\n    return createKeysForAuthStorage(AUTH_KEY_PREFIX, \"\".concat(this.authConfig.Cognito.userPoolClientId, \".\").concat(lastAuthUser));\n  }\n  getLastAuthUserKey() {\n    var _this$authConfig2;\n    assertTokenProviderConfig((_this$authConfig2 = this.authConfig) === null || _this$authConfig2 === void 0 ? void 0 : _this$authConfig2.Cognito);\n    const identifier = this.authConfig.Cognito.userPoolClientId;\n    return \"\".concat(AUTH_KEY_PREFIX, \".\").concat(identifier, \".LastAuthUser\");\n  }\n  async getLastAuthUser() {\n    var _await$this$getKeyVal3;\n    const lastAuthUser = (_await$this$getKeyVal3 = await this.getKeyValueStorage().getItem(this.getLastAuthUserKey())) !== null && _await$this$getKeyVal3 !== void 0 ? _await$this$getKeyVal3 : 'username';\n    return lastAuthUser;\n  }\n  async setOAuthMetadata(metadata) {\n    const {\n      oauthMetadata: oauthMetadataKey\n    } = await this.getAuthKeys();\n    await this.getKeyValueStorage().setItem(oauthMetadataKey, JSON.stringify(metadata));\n  }\n  async getOAuthMetadata() {\n    const {\n      oauthMetadata: oauthMetadataKey\n    } = await this.getAuthKeys();\n    const oauthMetadata = await this.getKeyValueStorage().getItem(oauthMetadataKey);\n    return oauthMetadata && JSON.parse(oauthMetadata);\n  }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n  return getAuthStorageKeys(AuthTokenStorageKeys)(\"\".concat(provider), identifier);\n};\nfunction getAuthStorageKeys(authKeys) {\n  const keys = Object.values(_objectSpread({}, authKeys));\n  return (prefix, identifier) => keys.reduce((acc, authKey) => _objectSpread(_objectSpread({}, acc), {}, {\n    [authKey]: \"\".concat(prefix, \".\").concat(identifier, \".\").concat(authKey)\n  }), {});\n}\nexport { DefaultTokenStore, createKeysForAuthStorage, getAuthStorageKeys };\n//# sourceMappingURL=TokenStore.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}