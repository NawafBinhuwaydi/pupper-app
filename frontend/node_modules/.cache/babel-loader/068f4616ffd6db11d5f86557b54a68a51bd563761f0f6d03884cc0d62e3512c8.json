{"ast":null,"code":"import _objectSpread from \"/home/nawaf/aws-project/pupper-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, assertOAuthConfig, urlSafeEncode, isBrowser, AuthAction } from '@aws-amplify/core/internals/utils';\nimport '../utils/oauth/enableOAuthListener.mjs';\nimport { cognitoHostedUIIdentityProviderMap } from '../types/models.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { openAuthSession } from '../../../utils/openAuthSession.mjs';\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers.mjs';\nimport { generateCodeVerifier } from '../utils/oauth/generateCodeVerifier.mjs';\nimport { generateState } from '../utils/oauth/generateState.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { oAuthStore } from '../utils/oauth/oAuthStore.mjs';\nimport '../tokenProvider/tokenProvider.mjs';\nimport { getRedirectUrl } from '../utils/oauth/getRedirectUrl.mjs';\nimport { handleFailure } from '../utils/oauth/handleFailure.mjs';\nimport { completeOAuthFlow } from '../utils/oauth/completeOAuthFlow.mjs';\nimport '../../../types/Auth.mjs';\nimport { createOAuthError } from '../utils/oauth/createOAuthError.mjs';\nimport { listenForOAuthFlowCancellation } from '../utils/oauth/cancelOAuthFlow.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs in a user with OAuth. Redirects the application to an Identity Provider.\n *\n * @param input - The SignInWithRedirectInput object, if empty it will redirect to Cognito HostedUI\n *\n * @throws AuthTokenConfigException - Thrown when the user pool config is invalid.\n * @throws OAuthNotConfigureException - Thrown when the oauth config is invalid.\n */\nasync function signInWithRedirect(input) {\n  var _Amplify$getConfig$Au, _input$provider, _input$options, _input$options2, _input$options3, _input$options4;\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  assertOAuthConfig(authConfig);\n  oAuthStore.setAuthConfig(authConfig);\n  await assertUserNotAuthenticated();\n  let provider = 'COGNITO'; // Default\n  if (typeof (input === null || input === void 0 ? void 0 : input.provider) === 'string') {\n    provider = cognitoHostedUIIdentityProviderMap[input.provider];\n  } else if (input !== null && input !== void 0 && (_input$provider = input.provider) !== null && _input$provider !== void 0 && _input$provider.custom) {\n    provider = input.provider.custom;\n  }\n  return oauthSignIn({\n    oauthConfig: authConfig.loginWith.oauth,\n    clientId: authConfig.userPoolClientId,\n    provider,\n    customState: input === null || input === void 0 ? void 0 : input.customState,\n    preferPrivateSession: input === null || input === void 0 || (_input$options = input.options) === null || _input$options === void 0 ? void 0 : _input$options.preferPrivateSession,\n    options: {\n      loginHint: input === null || input === void 0 || (_input$options2 = input.options) === null || _input$options2 === void 0 ? void 0 : _input$options2.loginHint,\n      lang: input === null || input === void 0 || (_input$options3 = input.options) === null || _input$options3 === void 0 ? void 0 : _input$options3.lang,\n      nonce: input === null || input === void 0 || (_input$options4 = input.options) === null || _input$options4 === void 0 ? void 0 : _input$options4.nonce\n    }\n  });\n}\nconst oauthSignIn = async _ref => {\n  var _await$openAuthSessio;\n  let {\n    oauthConfig,\n    provider,\n    clientId,\n    customState,\n    preferPrivateSession,\n    options\n  } = _ref;\n  const {\n    domain,\n    redirectSignIn,\n    responseType,\n    scopes\n  } = oauthConfig;\n  const {\n    loginHint,\n    lang,\n    nonce\n  } = options !== null && options !== void 0 ? options : {};\n  const randomState = generateState();\n  /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n  single-encodes/decodes url on first sign in and double-encodes/decodes url\n  when user already signed in. Using encodeURIComponent, Base32, Base64 add\n  characters % or = which on further encoding becomes unsafe. '=' create issue\n  for parsing query params.\n  Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n  const state = customState ? \"\".concat(randomState, \"-\").concat(urlSafeEncode(customState)) : randomState;\n  const {\n    value,\n    method,\n    toCodeChallenge\n  } = generateCodeVerifier(128);\n  const redirectUri = getRedirectUrl(oauthConfig.redirectSignIn);\n  if (isBrowser()) oAuthStore.storeOAuthInFlight(true);\n  oAuthStore.storeOAuthState(state);\n  oAuthStore.storePKCE(value);\n  const queryString = Object.entries(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    redirect_uri: redirectUri,\n    response_type: responseType,\n    client_id: clientId,\n    identity_provider: provider,\n    scope: scopes.join(' ')\n  }, loginHint && {\n    login_hint: loginHint\n  }), lang && {\n    lang\n  }), nonce && {\n    nonce\n  }), {}, {\n    state\n  }, responseType === 'code' && {\n    code_challenge: toCodeChallenge(),\n    code_challenge_method: method\n  })).map(_ref2 => {\n    let [k, v] = _ref2;\n    return \"\".concat(encodeURIComponent(k), \"=\").concat(encodeURIComponent(v));\n  }).join('&');\n  // TODO(v6): use URL object instead\n  const oAuthUrl = \"https://\".concat(domain, \"/oauth2/authorize?\").concat(queryString);\n  // this will only take effect in the following scenarios:\n  // 1. the user cancels the OAuth flow on web via back button, and\n  // 2. when bfcache is enabled\n  listenForOAuthFlowCancellation(oAuthStore);\n  // the following is effective only in react-native as openAuthSession resolves only in react-native\n  const {\n    type,\n    error,\n    url\n  } = (_await$openAuthSessio = await openAuthSession(oAuthUrl)) !== null && _await$openAuthSessio !== void 0 ? _await$openAuthSessio : {};\n  try {\n    if (type === 'error') {\n      throw createOAuthError(String(error));\n    }\n    if (type === 'success' && url) {\n      await completeOAuthFlow({\n        currentUrl: url,\n        clientId,\n        domain,\n        redirectUri,\n        responseType,\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),\n        preferPrivateSession\n      });\n    }\n  } catch (err) {\n    await handleFailure(err);\n    // rethrow the error so it can be caught by `await signInWithRedirect()` in react-native\n    throw err;\n  }\n};\nexport { signInWithRedirect };\n//# sourceMappingURL=signInWithRedirect.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}