{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{getCurrentUser,signOut,fetchAuthSession}from'aws-amplify/auth';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[isAuthenticated,setIsAuthenticated]=useState(false);useEffect(()=>{checkAuthState();},[]);const checkAuthState=async()=>{try{setLoading(true);const currentUser=await getCurrentUser();const session=await fetchAuthSession();if(currentUser&&session.tokens){setUser(currentUser);setIsAuthenticated(true);}else{setUser(null);setIsAuthenticated(false);}}catch(error){console.log('No authenticated user:',error);setUser(null);setIsAuthenticated(false);}finally{setLoading(false);}};const logout=async()=>{try{await signOut();setUser(null);setIsAuthenticated(false);}catch(error){console.error('Error signing out:',error);}};const value={user,isAuthenticated,loading,checkAuthState,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}