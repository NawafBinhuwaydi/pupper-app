{"ast":null,"code":"import { completeOAuthSignOut } from './completeOAuthSignOut.mjs';\nimport { oAuthSignOutRedirect } from './oAuthSignOutRedirect.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst handleOAuthSignOut = async (cognitoConfig, store, tokenOrchestrator, redirectUrl) => {\n  const {\n    isOAuthSignIn\n  } = await store.loadOAuthSignIn();\n  const oauthMetadata = await tokenOrchestrator.getOAuthMetadata();\n  // Clear everything before attempting to visted logout endpoint since the current application\n  // state could be wiped away on redirect\n  await completeOAuthSignOut(store);\n  // The isOAuthSignIn flag is propagated by the oAuthToken store which manages oauth keys in local storage only.\n  // These keys are used to determine if a user is in an inflight or signedIn oauth states.\n  // However, this behavior represents an issue when 2 apps share the same set of tokens in Cookie storage because the app that didn't\n  // start the OAuth will not have access to the oauth keys.\n  // A heuristic solution is to add oauth metadata to the tokenOrchestrator which will have access to the underlying\n  // storage mechanism that is used by Amplify.\n  if (isOAuthSignIn || oauthMetadata !== null && oauthMetadata !== void 0 && oauthMetadata.oauthSignIn) {\n    // On web, this will always end up being a void action\n    return oAuthSignOutRedirect(cognitoConfig, false, redirectUrl);\n  }\n};\nexport { handleOAuthSignOut };\n//# sourceMappingURL=handleOAuthSignOut.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}